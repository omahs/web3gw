{
    "openrpc": "1.0.0",
    "info": {
      "title": "Web3Proxy JSON-RPC API",
      "version": "1.0.0"
    },
    "methods": [
      {
        "name": "btc.Load",
        "description": "Connects to the bitcoin node. This should be the first call to execute.",
        "params": [
          {
            "name": "params",
            "schema": {
              "$ref": "#/components/schemas/Load"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "btc.ImportAddress",
        "description": "Imports the passed public address.",
        "params": [
          {
            "name": "address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "btc.ImportAddressRescan",
        "description": "Imports the passed public address. When rescan is true, the block history is scanned for transactions addressed to provided address.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/ImportAddressRescan"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "btc.ImportPrivKey",
        "description": "Imports the passed private key which must be the wallet import format (WIF). The WIF string must be a base58-encoded string.",
        "params": [
          {
            "name": "wif",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "btc.ImportPrivKeyLabel",
        "description": "Imports the passed private key which must be the wallet import format (WIF). It sets the account label to the one provided. The WIF string must be a base58-encoded string.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/ImportPrivKeyLabel"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "btc.ImportPrivKeyRescan",
        "description": "Imports the passed private key which must be the wallet import format (WIF). It sets the account label to the one provided. When rescan is true, the block history is scanned for transactions addressed to provided privKey. The WIF string must be a base58-encoded string.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/ImportPrivKeyRescan"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "btc.ImportPubKey",
        "description": "Imports the passed public key.",
        "params": [
          {
            "name": "pub_key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "btc.ImportPubKeyRescan",
        "description": "Imports the passed public key. When rescan is true, the block history is scanned for transactions addressed to provided pubkey.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/ImportPubKeyRescan"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "btc.RenameAccount",
        "description": "Allows you to rename an account.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/RenameAccount"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "btc.SendToAddress",
        "description": "Sends the passed amount to the given address with a comment if provided and returns the hash of the transaction",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/SendToAddress"
            }
          }
        ],
        "result": {
          "name": "the hash of the transaction",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "btc.EstimateSmartFee",
        "description": "Provides a more accurate estimated fee given an estimation mode.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/EstimateSmartFee"
            }
          }
        ],
        "result": {
          "name": "EstimateSmartFeeResult",
          "schema": {
            "$ref": "#/components/schemas/EstimateSmartFeeResult"
          }
        }
      },
      {
        "name": "btc.GenerateBlocks",
        "description": "Generates the provided amount of blocks and returns their hashes.",
        "params": [
          {
            "name": "num_blocks",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "result": {
          "name": "their hashes",
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      {
        "name": "btc.GenerateBlocksToAddress",
        "description": "Generates numBlocks blocks to the given address and returns their hashes.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/GenerateToAddress"
            }
          }
        ],
        "result": {
          "name": "their hashes",
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      {
        "name": "btc.GetAccount",
        "description": "Returns the account associated with the passed address. The address should be the string encoded version of a valid address.",
        "params": [
          {
            "name": "address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "btc.GetAccountAddress",
        "description": "Returns the current Bitcoin address for receiving payments to the specified account.",
        "params": [
          {
            "name": "account",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "btc.GetAddressInfo",
        "description": "Returns information about the given bitcoin address.",
        "params": [
          {
            "name": "address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "GetAddressInfoResult",
          "schema": {
            "$ref": "#/components/schemas/GetAddressInfoResult"
          }
        }
      },
      {
        "name": "btc.GetAddressesByAccount",
        "description": "Returns the list of addresses associated with the provided account. The returned list will be the string encoded versions of the addresses.",
        "params": [
          {
            "name": "account",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "![]string",
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      {
        "name": "btc.GetBalance",
        "description": "Returns the available balance for the specified account using the default number of minimum confirmations. You can provide * as an account to get the balance of all accounts.",
        "params": [
          {
            "name": "account",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!i64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "btc.GetBlockCount",
        "description": "Returns the number of blocks in the longest block chain.",
        "params": [],
        "result": {
          "name": "!i64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "btc.GetBlockHash",
        "description": "Returns the hash of the block in the best block chain at the given height.",
        "params": [
          {
            "name": "block_height",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "btc.GetBlockStats",
        "description": "Returns block statistics given the hash of that block.",
        "params": [
          {
            "name": "hash",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "GetBlockStatsResult",
          "schema": {
            "$ref": "#/components/schemas/GetBlockStatsResult"
          }
        }
      },
      {
        "name": "btc.GetBlockVerboseTx",
        "description": "Returns information about a block and its transactions given the hash of that block.",
        "params": [
          {
            "name": "hash",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "GetBlockVerboseTxResult",
          "schema": {
            "$ref": "#/components/schemas/GetBlockVerboseTxResult"
          }
        }
      },
      {
        "name": "btc.GetChainTxStats",
        "description": "Returns statistics about the total number and rate of transactions in the chain. Providing the arguments will reduce the amount of blocks to calculate the statistics on.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/GetChainTxStats"
            }
          }
        ],
        "result": {
          "name": "GetChainTxStatsResult",
          "schema": {
            "$ref": "#/components/schemas/GetChainTxStatsResult"
          }
        }
      },
      {
        "name": "btc.GetDifficulty",
        "description": "Returns the proof-of-work difficulty as a multiple of the minimum difficulty.",
        "params": [],
        "result": {
          "name": "!f64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "btc.GetMiningInfo",
        "description": "Returns mining information.",
        "params": [],
        "result": {
          "name": "GetMiningInfoResult",
          "schema": {
            "$ref": "#/components/schemas/GetMiningInfoResult"
          }
        }
      },
      {
        "name": "btc.GetNewAddress",
        "description": "Returns a new address. The returned string will be the encoded address (format will be based on the chain's parameters).",
        "params": [
          {
            "name": "account",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "btc.GetNodeAddresses",
        "description": "Returns data about known node addresses.",
        "params": [],
        "result": {
          "name": "GetNodeAddressesResult",
          "schema": {
            "$ref": "#/components/schemas/GetNodeAddressesResult"
          }
        }
      },
      {
        "name": "btc.GetPeerInfo",
        "description": "Returns data about each connected network peer.",
        "params": [],
        "result": {
          "name": "GetPeerInfoResult",
          "schema": {
            "$ref": "#/components/schemas/GetPeerInfoResult"
          }
        }
      },
      {
        "name": "btc.GetRawTransaction",
        "description": "Returns a transaction given its hash.",
        "params": [
          {
            "name": "tx_hash",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "Transaction",
          "schema": {
            "$ref": "#/components/schemas/Transaction"
          }
        }
      },
      {
        "name": "btc.CreateWallet",
        "description": "Creates a new wallet account taken into account the provided arguments.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/CreateWallet"
            }
          }
        ],
        "result": {
          "name": "CreateWalletResult",
          "schema": {
            "$ref": "#/components/schemas/CreateWalletResult"
          }
        }
      },
      {
        "name": "btc.Move",
        "description": "Moves specified amount from one account in your wallet to another. Only funds with the default number of minimum confirmations will be used. A comment can also be added to the transaction.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/Move"
            }
          }
        ],
        "result": {
          "name": "!bool",
          "schema": {
            "type": "boolean"
          }
        }
      },
      {
        "name": "eth.Load",
        "description": "CORE",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/Load"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "eth.Transer",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/Transfer"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.Balance",
        "params": [
          {
            "name": "address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!i64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.Height",
        "params": [],
        "result": {
          "name": "!u64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.TokenBalance",
        "description": "ERC20",
        "params": [
          {
            "name": "contractAddress",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!i64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.TokenTranser",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/TokenTransfer"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.TokenTranserFrom",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/TokenTransferFrom"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.ApproveTokenSpending",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/ApproveTokenSpending"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.GetMultisigOwners",
        "description": "Multisig",
        "params": [
          {
            "name": "contractAddress",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "![]string",
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      {
        "name": "eth.GetMultisigThreshold",
        "params": [
          {
            "name": "contractAddress",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!i64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.AddMultisigOwner",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/MultisigOwner"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.RemoveMultisigOwner",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/MultisigOwner"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.ApproveHash",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/ApproveHash"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.IsApproved",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/ApproveHash"
            }
          }
        ],
        "result": {
          "name": "!bool",
          "schema": {
            "type": "boolean"
          }
        }
      },
      {
        "name": "eth.InitiateMultisigEthTransfer",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/InitiateMultisigEthTransfer"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.InitiateMultisigTokenTransfer",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/InitiateMultisigTokenTransfer"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.GetFungibleBalance",
        "description": "Fungibles GetFungibleBalance (ERC721)",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/GetFungibleBalance"
            }
          }
        ],
        "result": {
          "name": "!i64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.OwnerOfFungible",
        "description": "OwnerOfFungible (ERC721)",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/OwnerOfFungible"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.SafeTransferFungible",
        "description": "SafeTransferFungible (ERC721)",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/TransferFungible"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.TransferFungible",
        "description": "TransferFungible (ERC721)",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/TransferFungible"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.SetFungibleApproval",
        "description": "SetFungibleApproval (ERC721)",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/SetFungibleApproval"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.SetFungibleApprovalForAll",
        "description": "SetFungibleApprovalForAll (ERC721)",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/SetFungibleApprovalForAll"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "eth.GetFungibleApproval",
        "description": "GetApprovalForFungible (ERC721)",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/ApprovalForFungible"
            }
          }
        ],
        "result": {
          "name": "!bool",
          "schema": {
            "type": "boolean"
          }
        }
      },
      {
        "name": "eth.GetFungibleApprovalForAll",
        "description": "GetApprovalForAllFungible (ERC721)",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/ApprovalForFungible"
            }
          }
        ],
        "result": {
          "name": "!bool",
          "schema": {
            "type": "boolean"
          }
        }
      },
      {
        "name": "explorer.Load",
        "description": "First call to make to initialize your session. Provide the network you want to use to do so.",
        "params": [
          {
            "name": "network",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "explorer.Ping",
        "description": "Pings the gridproxy server",
        "params": [],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "explorer.Nodes",
        "description": "Fetches grid nodes based on some filters. A list of nodes is returned and the total amount of nodes too.",
        "params": [
          {
            "name": "params",
            "schema": {
              "$ref": "#/components/schemas/NodesRequestParams"
            }
          }
        ],
        "result": {
          "name": "NodesResult",
          "schema": {
            "$ref": "#/components/schemas/NodesResult"
          }
        }
      },
      {
        "name": "explorer.Farms",
        "description": "Fetches grid farms based on some filters. A list of farms is returned and the total amount of farms too.",
        "params": [
          {
            "name": "params",
            "schema": {
              "$ref": "#/components/schemas/FarmsRequestParams"
            }
          }
        ],
        "result": {
          "name": "FarmsResult",
          "schema": {
            "$ref": "#/components/schemas/FarmsResult"
          }
        }
      },
      {
        "name": "explorer.Contracts",
        "description": "Fetches grid contracts based on some filters. A list of contracts is returned and the total amount of contracts too.",
        "params": [
          {
            "name": "params",
            "schema": {
              "$ref": "#/components/schemas/ContractsRequestParams"
            }
          }
        ],
        "result": {
          "name": "ContractsResult",
          "schema": {
            "$ref": "#/components/schemas/ContractsResult"
          }
        }
      },
      {
        "name": "explorer.Twins",
        "description": "Fetches grid twins based on some filters. A list of the twins is returned and the total amount of twins too.",
        "params": [
          {
            "name": "params",
            "schema": {
              "$ref": "#/components/schemas/TwinsRequestParams"
            }
          }
        ],
        "result": {
          "name": "TwinsResult",
          "schema": {
            "$ref": "#/components/schemas/TwinsResult"
          }
        }
      },
      {
        "name": "explorer.Node",
        "description": "Gets the node with the provided id. The result object contains data relevant to the node (resources, farm, etc.)",
        "params": [
          {
            "name": "node_id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "result": {
          "name": "NodeWithNestedCapacity",
          "schema": {
            "$ref": "#/components/schemas/NodeWithNestedCapacity"
          }
        }
      },
      {
        "name": "explorer.NodeStatus",
        "description": "Checks the status of node (if it is up or down).",
        "params": [
          {
            "name": "node_id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "result": {
          "name": "NodeStatus",
          "schema": {
            "$ref": "#/components/schemas/NodeStatus"
          }
        }
      },
      {
        "name": "explorer.Counters",
        "description": "Counters fetches statistics of the grid (amount nodes, amount of farms, amount of contracts, etc).",
        "params": [
          {
            "name": "filters",
            "schema": {
              "$ref": "#/components/schemas/StatsFilter"
            }
          }
        ],
        "result": {
          "name": "Counters",
          "schema": {
            "$ref": "#/components/schemas/Counters"
          }
        }
      },
      {
        "name": "ipfs.StoreFile",
        "description": "Store content on ipfs, returns cid",
        "params": [
          {
            "name": "content",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "cid",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "ipfs.GetFile",
        "description": "Gets file content from ipfs based on cid",
        "params": [
          {
            "name": "cid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "ipfs.RemoveFile",
        "description": "Removes files based on cid",
        "params": [
          {
            "name": "cid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!bool",
          "schema": {
            "type": "boolean"
          }
        }
      },
      {
        "name": "ipfs.RemoveAllFiles",
        "description": "remove all files from ipfs",
        "params": [],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "ipfs.ListCids",
        "description": "list all cids from ipfs",
        "params": [],
        "result": {
          "name": "![]string",
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      {
        "name": "nostr.Load",
        "description": " the nostr client with a secret",
        "params": [
          {
            "name": "secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "nostr.ConnectToRelay",
        "description": "connect to a relay given a url",
        "params": [
          {
            "name": "relay_url",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "nostr.ConnectToAuthRelay",
        "description": "connect to the authenticated relay",
        "params": [
          {
            "name": "relay_url",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "nostr.GenerateKeypair",
        "description": "generate a keypair",
        "params": [],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "nostr.GetId",
        "description": "get the nostr encoded id",
        "params": [],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "nostr.GetPublicKey",
        "description": "get public key",
        "params": [],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "nostr.PublishTextNote",
        "description": "publish a text note to the relay",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/TextNote"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "nostr.PublishMetadata",
        "description": "publish metadata to the relay",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/Metadata"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "nostr.PublishDirectMessage",
        "description": "publish a direct message to the relay given a receiver",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/DirectMessage"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "nostr.SubscribeTextNotes",
        "description": "subscribe to the relays for text notes",
        "params": [],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "nostr.SubscribeToDirectMessages",
        "description": "subscribe to the relays for direct messages",
        "params": [],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "nostr.SubscribeToStallCreation",
        "description": "subscribe to relays for stall creation",
        "params": [],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "nostr.SubscribeToProductCreation",
        "description": "subscribe to relays for product creation",
        "params": [],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "nostr.GetEvents",
        "description": "get all the events for the subscriptions",
        "params": [],
        "result": {
          "name": "Event",
          "schema": {
            "$ref": "#/components/schemas/Event"
          }
        }
      },
      {
        "name": "nostr.CloseSubscription",
        "description": "close a subscription given an id",
        "params": [
          {
            "name": "id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "nostr.GetSubscriptionIds",
        "description": "get all the subscription ids",
        "params": [],
        "result": {
          "name": "![]string",
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      {
        "name": "nostr.PublishStall",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/StallCreateInput"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "nostr.PublishProduct",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/ProductCreateInput"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfchain.Load",
        "description": "Load your mnemonic with this call. Choose the network while doing so. The network should be one of: mainnet, testnet, qanet, devnet",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/Load"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfchain.Transfer",
        "description": "Transfer some amount to some destination. The destionation should be a SS58 address.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/Transfer"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfchain.Balance",
        "description": "Ask for the balance of an entity using this call. The address should be a SS58 address.",
        "params": [
          {
            "name": "address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!i64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "tfchain.Height",
        "description": "Get the current height of the chain.",
        "params": [],
        "result": {
          "name": "!u64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "tfchain.GetTwin",
        "description": "Get a twin by id.",
        "params": [
          {
            "name": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "result": {
          "name": "Twin",
          "schema": {
            "$ref": "#/components/schemas/Twin"
          }
        }
      },
      {
        "name": "tfchain.GetTwinByPubkey",
        "description": "Get the twin id that is bound to a SS58 address.",
        "params": [
          {
            "name": "address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!u32",
          "schema": {
            "type": "integer"
          }
        }
      },
      {
        "name": "tfchain.CreateTwin",
        "description": "Create a twin. Provide the relay and your public key in this call. The result of this call contains your twin id.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/CreateTwin"
            }
          }
        ],
        "result": {
          "name": "!u32",
          "schema": {
            "type": "integer"
          }
        }
      },
      {
        "name": "tfchain.AcceptTermsAndConditions",
        "description": "Accepts terms and conditions. Provide the document link and document hash while executing this call.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/AcceptTermsAndConditions"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfchain.GetNode",
        "description": "Get a node by id.",
        "params": [
          {
            "name": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "result": {
          "name": "Node",
          "schema": {
            "$ref": "#/components/schemas/Node"
          }
        }
      },
      {
        "name": "tfchain.GetNodes",
        "description": "Get the nodes that belong to the farm with id. Returns a list of node ids.",
        "params": [
          {
            "name": "farm_id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "result": {
          "name": "![]u32",
          "schema": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      {
        "name": "tfchain.GetFarm",
        "description": "Get farm by id.",
        "params": [
          {
            "name": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "result": {
          "name": "Farm",
          "schema": {
            "$ref": "#/components/schemas/Farm"
          }
        }
      },
      {
        "name": "tfchain.GetFarmByName",
        "description": "Get farm by name.",
        "params": [
          {
            "name": "name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!u32",
          "schema": {
            "type": "integer"
          }
        }
      },
      {
        "name": "tfchain.CreateFarm",
        "description": "Create a farm. Provide a name an a list of public ips if there are any.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/CreateFarm"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfchain.GetContract",
        "description": "Get a contract by id. Contract can be any of the following types: node contract, name contract or rent contract.",
        "params": [
          {
            "name": "contract_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "Contract",
          "schema": {
            "$ref": "#/components/schemas/Contract"
          }
        }
      },
      {
        "name": "tfchain.GetContractIdByNameRegistration",
        "description": "Get contract by name registration. Returns the id of the contract.",
        "params": [
          {
            "name": "name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!u64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "tfchain.GetContractWithHash",
        "description": "Get contract by hash. Returns the contract id.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/GetContractWithHash"
            }
          }
        ],
        "result": {
          "name": "!u64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "tfchain.GetNodeContracts",
        "description": "Get contracts belonging to a node. Returns a list of contract ids.",
        "params": [
          {
            "name": "node_id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "result": {
          "name": "![]u64",
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      {
        "name": "tfchain.CreateNameContract",
        "description": "Create a name contract. Provide the dns name via this call. Returns the id of the contract it creates.",
        "params": [
          {
            "name": "name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!u64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "tfchain.CreateNodeContract",
        "description": "Create a node contract. Provide the node id, body, hash, how many public ips you want to use and optionally the solution provider id.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/CreateNodeContract"
            }
          }
        ],
        "result": {
          "name": "!u64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "tfchain.CreateRentContract",
        "description": "Create a rent contract. Provide the node id of the node you want to rent and optionally the solution provider id.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/CreateRentContract"
            }
          }
        ],
        "result": {
          "name": "!u64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "tfchain.ServiceContractCreate",
        "description": "Create a service contract. Provide the SS58 addresses of the service and the consumer.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/ServiceContractCreate"
            }
          }
        ],
        "result": {
          "name": "!u64",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "tfchain.ServiceContractApprove",
        "description": "Approve a service contract. Provide the contract id to do so. Approving the contract is only allowed if the agreement is ready and only by the consumer or the service.",
        "params": [
          {
            "name": "contract_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfchain.ServiceContractBill",
        "description": "Bill a service contract. Provide the contract id, variable_amount and some metadata. The contract can only be billed if both service and consumer have approved the contract.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/ServiceContractBill"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfchain.ServiceContractCancel",
        "description": "Cancel a service contract. Provide the contract id to do so.",
        "params": [
          {
            "name": "contract_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfchain.ServiceContractReject",
        "description": "Reject a service contract. Provide the contract id to do so. Only the service or the consumer is allowed to do so and only if it reached a state of agreement. The contract will be deleted when at the first call of either the service or the consumer.",
        "params": [
          {
            "name": "contract_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfchain.ServiceContractSetFees",
        "description": "Set the service contract fees. Provide the contract id, the base fee and the variable fee. Only the service is allowed to set the fees and only if the contract is not approved by both parties yet. The state is set to agreemen if the metadata has been set.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/SetServiceContractFees"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfchain.ServiceContractSetMetadata",
        "description": "Set the service contract metadata. Provide contract id and the metadata. Only service or consumer can set the metadata. The metadata can be modified by calling this method again but only if the contract is not yet approved by both parties. The base fee cannot be 0.",
        "params": [
          {
            "name": "args",
            "schema": {
              "$ref": "#/components/schemas/ServiceContractSetMetadata"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfchain.CancelContract",
        "description": "Cancel a contract. Provide the contract id to do so. Only the creator of the contract can cancle the contract. If the contract is a rent contract it can only be canceled if it has no more active workloads.",
        "params": [
          {
            "name": "contract_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfchain.BatchCancelContract",
        "description": "Cancel a list contracts. Provide a list of contract ids to do so. They can only be canceled if they were created by the entity calling this function. Rent contracts can not have active workloads in order to be canceled.",
        "params": [
          {
            "name": "contract_ids",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfchain.GetZosVersion",
        "description": "Get the current ZOS version",
        "params": [],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "tfgrid.FilterNodes",
        "description": "This call can be used to filter nodes on specific options such as the available memory, cores, etc. It",
        "params": [
          {
            "name": "filters",
            "schema": {
              "$ref": "#/components/schemas/FilterOptions"
            }
          }
        ],
        "result": {
          "name": "list of available nodes (their id)",
          "schema": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      {
        "name": "tfgrid.GatewaysDeployFqdn",
        "description": "Deploys a fully qualified domain on gateway (for example site.com) and returns gateway model with some extra data related to the created fqdn.",
        "params": [
          {
            "name": "model",
            "schema": {
              "$ref": "#/components/schemas/GatewayFQDN"
            }
          }
        ],
        "result": {
          "name": "gateway model\u0001 with some extra data related to the created fqdn",
          "schema": {
            "$ref": "#/components/schemas/GatewayFQDNResult"
          }
        }
      },
      {
        "name": "tfgrid.GatewaysGetFqdn",
        "description": "Gets the fqdn info using the name given when created. It returns an object containing the fully qualified domain on gateway information.",
        "params": [
          {
            "name": "model_name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "an object containing the\u0001 fully qualified domain on gateway information",
          "schema": {
            "$ref": "#/components/schemas/GatewayFQDNResult"
          }
        }
      },
      {
        "name": "tfgrid.GatewaysDeleteFqdn",
        "description": "Deletes the fully qualified domain on gateway given the name used to create it. An error is returned if the attempt failed.",
        "params": [
          {
            "name": "model_name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfgrid.GatewaysDeployName",
        "description": "Deploys a gateway name given the configuration and returns an object containing the gateway name configuration.",
        "params": [
          {
            "name": "model",
            "schema": {
              "$ref": "#/components/schemas/GatewayName"
            }
          }
        ],
        "result": {
          "name": "an object containing the\u0001 gateway name configuration",
          "schema": {
            "$ref": "#/components/schemas/GatewayNameResult"
          }
        }
      },
      {
        "name": "tfgrid.GatewaysGetName",
        "description": "Gets the gateway name object given the name used when deploying.",
        "params": [
          {
            "name": "model_name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "GatewayNameResult",
          "schema": {
            "$ref": "#/components/schemas/GatewayNameResult"
          }
        }
      },
      {
        "name": "tfgrid.GatewaysDeleteName",
        "description": "Deletes the gateway name given the name used when deploying. This call will return an error if it fails to do so.",
        "params": [
          {
            "name": "model_name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfgrid.K8sDeploy",
        "description": "Deploys a kubernetes cluster given the cluster configuration. The cluster object is returned with extra data if the call succeeds.",
        "params": [
          {
            "name": "cluster",
            "schema": {
              "$ref": "#/components/schemas/K8sCluster"
            }
          }
        ],
        "result": {
          "name": "K8sClusterResult",
          "schema": {
            "$ref": "#/components/schemas/K8sClusterResult"
          }
        }
      },
      {
        "name": "tfgrid.K8sGet",
        "description": "Gets a deployed kubernetes cluster data given its name. Returns an error if no cluster can be found with the provided name.",
        "params": [
          {
            "name": "cluster_name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "K8sClusterResult",
          "schema": {
            "$ref": "#/components/schemas/K8sClusterResult"
          }
        }
      },
      {
        "name": "tfgrid.K8sDelete",
        "description": "Deletes a deployed kubernetes cluster given a name. The call returns an error if it fails to do so.",
        "params": [
          {
            "name": "cluster_name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "an error if it fails to do so",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfgrid.Load",
        "description": "Loads the mnemonic into the session for a specific network. The call returns an error if the mnemonic or the network is invalid.",
        "params": [
          {
            "name": "credentials",
            "schema": {
              "$ref": "#/components/schemas/Credentials"
            }
          }
        ],
        "result": {
          "name": "an error if the mnemonic or the\u0001 network is invalid",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfgrid.MachinesDeploy",
        "description": "Deploys a machines workload given a machines model. If it does not succeed the call returns an error.",
        "params": [
          {
            "name": "model",
            "schema": {
              "$ref": "#/components/schemas/MachinesModel"
            }
          }
        ],
        "result": {
          "name": "an error",
          "schema": {
            "$ref": "#/components/schemas/MachinesResult"
          }
        }
      },
      {
        "name": "tfgrid.MachinesGet",
        "description": "Gets the information about a machines deployment using the deployment name",
        "params": [
          {
            "name": "model_name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "MachinesResult",
          "schema": {
            "$ref": "#/components/schemas/MachinesResult"
          }
        }
      },
      {
        "name": "tfgrid.MachinesDelete",
        "description": "Deletes a deployed machines given the name used when deploying.",
        "params": [
          {
            "name": "model_name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfgrid.ZdbDeploy",
        "description": "Deploys a zdb workload on the grid given a model. This call returns the zdb model with extra computed data from the grid upon success.",
        "params": [
          {
            "name": "model",
            "schema": {
              "$ref": "#/components/schemas/ZDB"
            }
          }
        ],
        "result": {
          "name": "the zdb model with extra computed\u0001 data from the grid upon success",
          "schema": {
            "$ref": "#/components/schemas/ZDBResult"
          }
        }
      },
      {
        "name": "tfgrid.ZdbDelete",
        "description": "Deletes a deployed zdb workload given its name. Returns an error if it does not succeed.",
        "params": [
          {
            "name": "model_name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfgrid.ZdbGet",
        "description": "Gets a deployed zdb deployment info given its configuration name. Returns the zdb deployment data upon success.",
        "params": [
          {
            "name": "model_name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "ZDBResult",
          "schema": {
            "$ref": "#/components/schemas/ZDBResult"
          }
        }
      },
      {
        "name": "tfgrid.ZosDeploymentDeploy",
        "description": "Deploys a deployment on a ZOS node and returns a string containing system hypervisor info.",
        "params": [
          {
            "name": "request",
            "schema": {
              "$ref": "#/components/schemas/ZOSNodeRequest"
            }
          }
        ],
        "result": {
          "name": "a string containing system hypervisor info",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfgrid.ZosSystemVersion",
        "description": "Returns the system version of the ZOS node.",
        "params": [
          {
            "name": "request",
            "schema": {
              "$ref": "#/components/schemas/ZOSNodeRequest"
            }
          }
        ],
        "result": {
          "name": "SystemVersion",
          "schema": {
            "$ref": "#/components/schemas/SystemVersion"
          }
        }
      },
      {
        "name": "tfgrid.ZosSystemHypervisor",
        "description": "Returns system hypervisor info of the ZOS node.",
        "params": [
          {
            "name": "request",
            "schema": {
              "$ref": "#/components/schemas/ZOSNodeRequest"
            }
          }
        ],
        "result": {
          "name": "!string",
          "schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "tfgrid.ZosSystemDmi",
        "description": "Checks system DMI information for the selected ZOS node.",
        "params": [
          {
            "name": "request",
            "schema": {
              "$ref": "#/components/schemas/ZOSNodeRequest"
            }
          }
        ],
        "result": {
          "name": "DMI",
          "schema": {
            "$ref": "#/components/schemas/DMI"
          }
        }
      },
      {
        "name": "tfgrid.ZosNetworkPublicConfig",
        "description": "Gets the public configuration of the specified ZOS node.",
        "params": [
          {
            "name": "request",
            "schema": {
              "$ref": "#/components/schemas/ZOSNodeRequest"
            }
          }
        ],
        "result": {
          "name": "PublicConfig",
          "schema": {
            "$ref": "#/components/schemas/PublicConfig"
          }
        }
      },
      {
        "name": "tfgrid.ZosNetworkInterfaces",
        "description": "Returns all network interfaces of the selected ZOS node. It returns a map from interface name to its IPs.",
        "params": [
          {
            "name": "request",
            "schema": {
              "$ref": "#/components/schemas/ZOSNodeRequest"
            }
          }
        ],
        "result": {
          "name": "a map from interface name\u0001 to its IPs",
          "schema": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      {
        "name": "tfgrid.ZosNetworkListWgPorts",
        "description": "Returns a list of all the ports that are taken on the selected ZOS node.",
        "params": [
          {
            "name": "request",
            "schema": {
              "$ref": "#/components/schemas/ZOSNodeRequest"
            }
          }
        ],
        "result": {
          "name": "![]u16",
          "schema": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      {
        "name": "tfgrid.ZosNodeStatistics",
        "description": "Returns the node statistics including total and available cpu, memory, storage, etc...",
        "params": [
          {
            "name": "request",
            "schema": {
              "$ref": "#/components/schemas/ZOSNodeRequest"
            }
          }
        ],
        "result": {
          "name": "Statistics",
          "schema": {
            "$ref": "#/components/schemas/Statistics"
          }
        }
      },
      {
        "name": "tfgrid.ZosDeploymentChanges",
        "description": "Returns all workload changes over the lifetime of the deployment.",
        "params": [
          {
            "name": "request",
            "schema": {
              "$ref": "#/components/schemas/ZOSNodeRequest"
            }
          }
        ],
        "result": {
          "name": "Workload",
          "schema": {
            "$ref": "#/components/schemas/Workload"
          }
        }
      },
      {
        "name": "tfgrid.ZosDeploymentUpdate",
        "description": "Updates a deployment on a node given new deployment data.",
        "params": [
          {
            "name": "request",
            "schema": {
              "$ref": "#/components/schemas/ZOSNodeRequest"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfgrid.ZosDeploymentDelete",
        "description": "Deletes a deployment on a ZOS node.",
        "params": [
          {
            "name": "request",
            "schema": {
              "$ref": "#/components/schemas/ZOSNodeRequest"
            }
          }
        ],
        "result": {
          "name": "!",
          "schema": {
            "type": "null"
          }
        }
      },
      {
        "name": "tfgrid.ZosDeploymentGet",
        "description": "Gets the deployment data of an existing deployment. This call requires the contract id.",
        "params": [
          {
            "name": "request",
            "schema": {
              "$ref": "#/components/schemas/ZOSNodeRequest"
            }
          }
        ],
        "result": {
          "name": "Deployment",
          "schema": {
            "$ref": "#/components/schemas/Deployment"
          }
        }
      }
    ],
    "components": {
      "schemas": {
        "Load": {
          "title": "Load",
          "properties": {
            "network": {
              "$ref": "#/components/schemas/Network"
            },
            "mnemonic": {
              "type": "string"
            }
          }
        },
        "ImportAddressRescan": {
          "title": "ImportAddressRescan",
          "description": "args to import bitcoin address",
          "properties": {
            "address": {
              "type": "string"
            },
            "account": {
              "type": "string"
            },
            "rescan": {
              "type": "boolean"
            }
          }
        },
        "ImportPrivKeyLabel": {
          "title": "ImportPrivKeyLabel",
          "properties": {
            "wif": {
              "type": "string"
            },
            "label": {
              "type": "string"
            }
          }
        },
        "ImportPrivKeyRescan": {
          "title": "ImportPrivKeyRescan",
          "properties": {
            "wif": {
              "type": "string"
            },
            "label": {
              "type": "string"
            },
            "rescan": {
              "type": "boolean"
            }
          }
        },
        "ImportPubKeyRescan": {
          "title": "ImportPubKeyRescan",
          "properties": {
            "pub_key": {
              "type": "string"
            },
            "rescan": {
              "type": "boolean"
            }
          }
        },
        "RenameAccount": {
          "title": "RenameAccount",
          "properties": {
            "old_account": {
              "type": "string"
            },
            "new_account": {
              "type": "string"
            }
          }
        },
        "SendToAddress": {
          "title": "SendToAddress",
          "description": "send amount of token to address, with/without comment",
          "properties": {
            "address": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            },
            "comment": {
              "description": "is intended to be used for the purpose of the transaction, keep empty if you don't wat to provide any comment.",
              "type": "string"
            },
            "comment_to": {
              "description": "is intended to be used for who the transaction is being sent to.",
              "type": "string"
            }
          }
        },
        "EstimateSmartFee": {
          "title": "EstimateSmartFee",
          "properties": {
            "conf_target": {
              "description": "confirmation target in blocks",
              "type": "string"
            },
            "mode": {
              "description": "defines the different fee estimation modes, should be one of UNSET, ECONOMICAL or CONSERVATIVE",
              "type": "string"
            }
          }
        },
        "GenerateToAddress": {
          "title": "GenerateToAddress",
          "properties": {
            "num_blocks": {
              "description": "the amount of blocks to generate",
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "max_tries": {
              "description": "the maximum amount of times to try again when generating fails",
              "type": "string"
            }
          }
        },
        "GetChainTxStats": {
          "title": "GetChainTxStats",
          "properties": {
            "amount_of_blocks": {
              "description": "provide statistics for amount_of_blocks blocks, if 0 for all blocks",
              "type": "integer"
            },
            "block_hash_end": {
              "description": "provide statistics for amount_of_blocks blocks up until the block with the hash provided in block_hash_end",
              "type": "string"
            }
          }
        },
        "CreateWallet": {
          "title": "CreateWallet",
          "properties": {
            "name": {
              "type": "string"
            },
            "disable_private_keys": {
              "type": "boolean"
            },
            "create_blank_wallet": {
              "type": "boolean"
            },
            "passphrase": {
              "type": "string"
            },
            "avoid_reuse": {
              "type": "boolean"
            }
          }
        },
        "Move": {
          "title": "Move",
          "properties": {
            "from_account": {
              "type": "string"
            },
            "to_account": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            },
            "min_confirmations": {
              "type": "integer"
            },
            "comment": {
              "type": "string"
            }
          }
        },
        "EstimateSmartFeeResult": {
          "title": "EstimateSmartFeeResult",
          "properties": {
            "feerate": {
              "type": "string"
            },
            "errors": {
              "type": "array"
            },
            "blocks": {
              "type": "string"
            }
          }
        },
        "GetAddressInfoResult": {
          "title": "GetAddressInfoResult",
          "properties": {
            "ismine": {
              "type": "boolean"
            },
            "iswatchonly": {
              "type": "boolean"
            },
            "timestamp": {
              "type": "integer"
            },
            "hdkeypath": {
              "type": "string"
            },
            "hdseedid": {
              "type": "string"
            },
            "embedded": {
              "$ref": "#/components/schemas/EmbeddedAddressInfo"
            }
          }
        },
        "EmbeddedAddressInfo": {
          "title": "EmbeddedAddressInfo",
          "properties": {
            "address": {
              "type": "string"
            },
            "script_pub_key": {
              "type": "string"
            },
            "solvable": {
              "type": "boolean"
            },
            "desc": {
              "type": "string"
            },
            "isscript": {
              "type": "boolean"
            },
            "ischange": {
              "type": "boolean"
            },
            "iswitness": {
              "type": "boolean"
            },
            "witness_version": {
              "type": "integer"
            },
            "witness_program": {
              "type": "string"
            },
            "script": {
              "type": "string"
            },
            "hex": {
              "type": "string"
            },
            "pubkeys": {
              "type": "array"
            },
            "sigsrequired": {
              "type": "integer"
            },
            "pubkey": {
              "type": "string"
            },
            "iscompressed": {
              "type": "boolean"
            },
            "hdmasterfingerprint": {
              "type": "string"
            },
            "labels": {
              "type": "array"
            }
          }
        },
        "GetBlockStatsResult": {
          "title": "GetBlockStatsResult",
          "properties": {
            "avgfee": {
              "type": "string"
            },
            "avgfeerate": {
              "type": "string"
            },
            "avgtxsize": {
              "type": "string"
            },
            "feerate_percentiles": {
              "type": "array"
            },
            "blockhash": {
              "type": "string"
            },
            "height": {
              "type": "string"
            },
            "ins": {
              "type": "string"
            },
            "maxfee": {
              "type": "string"
            },
            "maxfeerate": {
              "type": "string"
            },
            "maxtxsize": {
              "type": "string"
            },
            "medianfee": {
              "type": "string"
            },
            "mediantime": {
              "type": "string"
            },
            "mediantxsize": {
              "type": "string"
            },
            "minfee": {
              "type": "string"
            },
            "minfeerate": {
              "type": "string"
            },
            "mintxsize": {
              "type": "string"
            },
            "outs": {
              "type": "string"
            },
            "swtotal_size": {
              "type": "string"
            },
            "swtotal_weight": {
              "type": "string"
            },
            "swtxs": {
              "type": "string"
            },
            "subsidy": {
              "type": "string"
            },
            "time": {
              "type": "string"
            },
            "total_out": {
              "type": "string"
            },
            "total_size": {
              "type": "string"
            },
            "total_weight": {
              "type": "string"
            },
            "txs": {
              "type": "string"
            },
            "utxo_increase": {
              "type": "string"
            },
            "utxo_size_inc": {
              "type": "string"
            }
          }
        },
        "GetBlockVerboseTxResult": {
          "title": "GetBlockVerboseTxResult",
          "description": "GetBlockVerboseTxResult models the data from the getblock command when the",
          "properties": {
            "hash": {
              "type": "string"
            },
            "confirmations": {
              "type": "string"
            },
            "strippedsize": {
              "type": "integer"
            },
            "size": {
              "type": "integer"
            },
            "weight": {
              "type": "integer"
            },
            "height": {
              "type": "string"
            },
            "version": {
              "type": "integer"
            },
            "version_hex": {
              "type": "string"
            },
            "merkleroot": {
              "type": "string"
            },
            "tx": {
              "$ref": "#/components/schemas/TxRawResult"
            },
            "rawtx": {
              "$ref": "#/components/schemas/TxRawResult"
            },
            "time": {
              "type": "string"
            },
            "nonce": {
              "type": "integer"
            },
            "bits": {
              "type": "string"
            },
            "difficulty": {
              "type": "string"
            },
            "previousblockhash": {
              "type": "string"
            },
            "nextblockhash": {
              "type": "string"
            }
          }
        },
        "TxRawResult": {
          "title": "TxRawResult",
          "description": "TxRawResult models the data from the getrawtransaction command.",
          "properties": {
            "hex": {
              "type": "string"
            },
            "txid": {
              "type": "string"
            },
            "hash": {
              "type": "string"
            },
            "size": {
              "type": "integer"
            },
            "vsize": {
              "type": "integer"
            },
            "weight": {
              "type": "integer"
            },
            "version": {
              "type": "integer"
            },
            "locktime": {
              "type": "integer"
            },
            "vin": {
              "$ref": "#/components/schemas/Vin"
            },
            "vout": {
              "$ref": "#/components/schemas/Vout"
            },
            "blockhash": {
              "type": "string"
            },
            "confirmations": {
              "type": "string"
            },
            "time": {
              "type": "string"
            },
            "blocktime": {
              "type": "string"
            }
          }
        },
        "Vin": {
          "title": "Vin",
          "properties": {
            "coinbase": {
              "type": "string"
            },
            "txid": {
              "type": "string"
            },
            "vout": {
              "type": "integer"
            },
            "script_sig": {
              "$ref": "#/components/schemas/ScriptSig"
            },
            "sequence": {
              "type": "integer"
            },
            "txinwitness": {
              "type": "array"
            }
          }
        },
        "ScriptSig": {
          "title": "ScriptSig",
          "properties": {
            "asm_": {
              "type": "string"
            },
            "hex": {
              "type": "string"
            }
          }
        },
        "Vout": {
          "title": "Vout",
          "properties": {
            "value": {
              "type": "string"
            },
            "n": {
              "type": "integer"
            },
            "script_pub_key": {
              "$ref": "#/components/schemas/ScriptPubKeyResult"
            }
          }
        },
        "ScriptPubKeyResult": {
          "title": "ScriptPubKeyResult",
          "properties": {
            "asm_": {
              "type": "string"
            },
            "hex": {
              "type": "string"
            },
            "req_sigs": {
              "type": "integer"
            },
            "type_": {
              "type": "string"
            },
            "addresses": {
              "type": "array"
            }
          }
        },
        "GetChainTxStatsResult": {
          "title": "GetChainTxStatsResult",
          "description": "GetChainTxStatsResult models the data from the getchaintxstats command.",
          "properties": {
            "time": {
              "type": "string"
            },
            "txcount": {
              "type": "string"
            },
            "window_final_block_hash": {
              "type": "string"
            },
            "window_final_block_height": {
              "type": "integer"
            },
            "window_block_count": {
              "type": "integer"
            },
            "window_tx_count": {
              "type": "integer"
            },
            "window_interval": {
              "type": "integer"
            },
            "txrate": {
              "type": "string"
            }
          }
        },
        "GetMiningInfoResult": {
          "title": "GetMiningInfoResult",
          "description": "GetMiningInfoResult models the data from the getmininginfo command.",
          "properties": {
            "blocks": {
              "type": "string"
            },
            "currentblocksize": {
              "type": "string"
            },
            "currentblockweight": {
              "type": "string"
            },
            "currentblocktx": {
              "type": "string"
            },
            "difficulty": {
              "type": "string"
            },
            "errors": {
              "type": "string"
            },
            "generate": {
              "type": "boolean"
            },
            "genproclimit": {
              "type": "integer"
            },
            "hashespersec": {
              "type": "string"
            },
            "networkhashps": {
              "type": "string"
            },
            "pooledtx": {
              "type": "string"
            },
            "testnet": {
              "type": "boolean"
            }
          }
        },
        "GetNodeAddressesResult": {
          "title": "GetNodeAddressesResult",
          "description": "GetNodeAddressesResult models the data returned from the getnodeaddresses command.",
          "properties": {
            "time": {
              "description": "Timestamp in seconds since epoch (Jan 1 1970 GMT) keeping track of when the node was last seen",
              "type": "string"
            },
            "services": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "port": {
              "type": "integer"
            }
          }
        },
        "GetPeerInfoResult": {
          "title": "GetPeerInfoResult",
          "description": "GetPeerInfoResult models the data returned from the getpeerinfo command.",
          "properties": {
            "id": {
              "type": "integer"
            },
            "addr": {
              "type": "string"
            },
            "addrlocal": {
              "type": "string"
            },
            "services": {
              "type": "string"
            },
            "relaytxes": {
              "type": "boolean"
            },
            "lastsend": {
              "type": "string"
            },
            "lastrecv": {
              "type": "string"
            },
            "bytessent": {
              "type": "string"
            },
            "bytesrecv": {
              "type": "string"
            },
            "conntime": {
              "type": "string"
            },
            "timeoffset": {
              "type": "string"
            },
            "pingtime": {
              "type": "string"
            },
            "pingwait": {
              "type": "string"
            },
            "version": {
              "type": "integer"
            },
            "subver": {
              "type": "string"
            },
            "inbound": {
              "type": "boolean"
            },
            "startingheight": {
              "type": "integer"
            },
            "currentheight": {
              "type": "integer"
            },
            "banscore": {
              "type": "integer"
            },
            "feefilter": {
              "type": "string"
            },
            "syncnode": {
              "type": "boolean"
            }
          }
        },
        "Transaction": {
          "title": "Transaction",
          "properties": {
            "msg_tx": {
              "$ref": "#/components/schemas/MsgTx"
            },
            "tx_hash": {
              "description": "Cached transaction hash",
              "type": "string"
            },
            "tx_hash_witness": {
              "description": "Cached transaction witness hash",
              "type": "string"
            },
            "tx_has_witness": {
              "description": "If the transaction has witness data",
              "type": "boolean"
            },
            "tx_index": {
              "description": "Position within a block or TxIndexUnknown",
              "type": "integer"
            }
          }
        },
        "MsgTx": {
          "title": "MsgTx",
          "properties": {
            "version": {
              "type": "integer"
            },
            "tx_in": {
              "$ref": "#/components/schemas/TxIn"
            },
            "tx_out": {
              "$ref": "#/components/schemas/TxOut"
            },
            "lock_time": {
              "type": "integer"
            }
          }
        },
        "TxIn": {
          "title": "TxIn",
          "properties": {
            "previous_out_point": {
              "$ref": "#/components/schemas/OutPoint"
            },
            "signature_script": {
              "type": "string"
            },
            "witness": {
              "type": "string"
            },
            "sequence": {
              "type": "integer"
            }
          }
        },
        "OutPoint": {
          "title": "OutPoint",
          "properties": {
            "hash": {
              "type": "string"
            },
            "index": {
              "type": "integer"
            }
          }
        },
        "TxOut": {
          "title": "TxOut",
          "properties": {
            "value": {
              "type": "string"
            },
            "pk_script": {
              "type": "string"
            }
          }
        },
        "CreateWalletResult": {
          "title": "CreateWalletResult",
          "description": "CreateWalletResult models the result of the createwallet command.",
          "properties": {
            "name": {
              "type": "string"
            },
            "warning": {
              "type": "string"
            }
          }
        },
        "Transfer": {
          "title": "Transfer",
          "properties": {
            "amount": {
              "type": "string"
            },
            "destination": {
              "type": "string"
            }
          }
        },
        "TokenTransfer": {
          "title": "TokenTransfer",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "destination": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          }
        },
        "TokenTransferFrom": {
          "title": "TokenTransferFrom",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "from": {
              "type": "string"
            },
            "destination": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          }
        },
        "ApproveTokenSpending": {
          "title": "ApproveTokenSpending",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "target": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          }
        },
        "MultisigOwner": {
          "title": "MultisigOwner",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "target": {
              "type": "string"
            },
            "threshold": {
              "type": "string"
            }
          }
        },
        "ApproveHash": {
          "title": "ApproveHash",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "hash": {
              "type": "string"
            }
          }
        },
        "InitiateMultisigEthTransfer": {
          "title": "InitiateMultisigEthTransfer",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "destination": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          }
        },
        "InitiateMultisigTokenTransfer": {
          "title": "InitiateMultisigTokenTransfer",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "token_address": {
              "type": "string"
            },
            "destination": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          }
        },
        "GetFungibleBalance": {
          "title": "GetFungibleBalance",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "target": {
              "type": "string"
            }
          }
        },
        "OwnerOfFungible": {
          "title": "OwnerOfFungible",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          }
        },
        "TransferFungible": {
          "title": "TransferFungible",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "from": {
              "type": "string"
            },
            "to": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          }
        },
        "SetFungibleApproval": {
          "title": "SetFungibleApproval",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "from": {
              "type": "string"
            },
            "to": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          }
        },
        "SetFungibleApprovalForAll": {
          "title": "SetFungibleApprovalForAll",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "from": {
              "type": "string"
            },
            "to": {
              "type": "string"
            },
            "approved": {
              "type": "boolean"
            }
          }
        },
        "ApprovalForFungible": {
          "title": "ApprovalForFungible",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "owner": {
              "type": "string"
            },
            "operator": {
              "type": "string"
            }
          }
        },
        "NodesRequestParams": {
          "title": "NodesRequestParams",
          "properties": {
            "filters": {
              "$ref": "#/components/schemas/NodeFilter"
            },
            "pagination": {
              "$ref": "#/components/schemas/Limit"
            }
          }
        },
        "FarmsRequestParams": {
          "title": "FarmsRequestParams",
          "properties": {
            "filters": {
              "$ref": "#/components/schemas/FarmFilter"
            },
            "pagination": {
              "$ref": "#/components/schemas/Limit"
            }
          }
        },
        "TwinsRequestParams": {
          "title": "TwinsRequestParams",
          "properties": {
            "filters": {
              "$ref": "#/components/schemas/TwinFilter"
            },
            "pagination": {
              "$ref": "#/components/schemas/Limit"
            }
          }
        },
        "ContractsRequestParams": {
          "title": "ContractsRequestParams",
          "properties": {
            "filters": {
              "$ref": "#/components/schemas/ContractFilter"
            },
            "pagination": {
              "$ref": "#/components/schemas/Limit"
            }
          }
        },
        "NodesResult": {
          "title": "NodesResult",
          "properties": {
            "nodes": {
              "$ref": "#/components/schemas/Node"
            },
            "total_count": {
              "type": "integer"
            }
          }
        },
        "FarmsResult": {
          "title": "FarmsResult",
          "properties": {
            "farms": {
              "$ref": "#/components/schemas/Farm"
            },
            "total_count": {
              "type": "integer"
            }
          }
        },
        "TwinsResult": {
          "title": "TwinsResult",
          "properties": {
            "twins": {
              "$ref": "#/components/schemas/Twin"
            },
            "total_count": {
              "type": "integer"
            }
          }
        },
        "ContractsResult": {
          "title": "ContractsResult",
          "properties": {
            "contracts": {
              "$ref": "#/components/schemas/Contract"
            },
            "total_count": {
              "type": "integer"
            }
          }
        },
        "NodeFilter": {
          "title": "NodeFilter",
          "description": "available options for filtering nodes",
          "properties": {
            "status": {
              "type": "string"
            },
            "free_mru": {
              "type": "string"
            },
            "free_hru": {
              "type": "string"
            },
            "free_sru": {
              "type": "string"
            },
            "total_mru": {
              "type": "string"
            },
            "total_hru": {
              "type": "string"
            },
            "total_sru": {
              "type": "string"
            },
            "total_cru": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "country_contains": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "city_contains": {
              "type": "string"
            },
            "farm_name": {
              "type": "string"
            },
            "farm_name_contains": {
              "type": "string"
            },
            "farm_ids": {
              "type": "array"
            },
            "free_ips": {
              "type": "string"
            },
            "ipv4": {
              "type": "boolean"
            },
            "ipv6": {
              "type": "boolean"
            },
            "domain": {
              "type": "boolean"
            },
            "dedicated": {
              "type": "boolean"
            },
            "rentable": {
              "type": "boolean"
            },
            "rented": {
              "type": "boolean"
            },
            "rented_by": {
              "type": "string"
            },
            "available_for": {
              "type": "string"
            },
            "node_id": {
              "type": "string"
            },
            "twin_id": {
              "type": "string"
            }
          }
        },
        "FarmFilter": {
          "title": "FarmFilter",
          "description": "available options for filtering farms",
          "properties": {
            "free_ips": {
              "type": "string"
            },
            "total_ips": {
              "type": "string"
            },
            "stellar_address": {
              "type": "string"
            },
            "pricing_policy_id": {
              "type": "string"
            },
            "farm_id": {
              "type": "string"
            },
            "twin_id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "name_contains": {
              "type": "string"
            },
            "certification_type": {
              "type": "string"
            },
            "dedicated": {
              "type": "boolean"
            }
          }
        },
        "TwinFilter": {
          "title": "TwinFilter",
          "description": "available options for filtering twins",
          "properties": {
            "twin_id": {
              "type": "string"
            },
            "account_id": {
              "type": "string"
            },
            "relay": {
              "type": "string"
            },
            "public_key": {
              "type": "string"
            }
          }
        },
        "ContractFilter": {
          "title": "ContractFilter",
          "description": "available options for filtering contracts",
          "properties": {
            "contract_id": {
              "type": "string"
            },
            "twin_id": {
              "type": "string"
            },
            "node_id": {
              "type": "string"
            },
            "type_": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "number_of_public_ips": {
              "type": "string"
            },
            "deployment_data": {
              "type": "string"
            },
            "deployment_hash": {
              "type": "string"
            }
          }
        },
        "StatsFilter": {
          "title": "StatsFilter",
          "description": "filter statistics based on grid node status",
          "properties": {
            "status": {
              "type": "string"
            }
          }
        },
        "Node": {
          "title": "Node",
          "properties": {
            "version": {
              "type": "integer"
            },
            "id": {
              "type": "integer"
            },
            "farm_id": {
              "type": "integer"
            },
            "twin_id": {
              "type": "integer"
            },
            "resources": {
              "$ref": "#/components/schemas/Resources"
            },
            "location": {
              "$ref": "#/components/schemas/Location"
            },
            "public_config": {
              "$ref": "#/components/schemas/OptionPublicConfig"
            },
            "created": {
              "type": "string"
            },
            "farming_policy": {
              "type": "integer"
            },
            "interfaces": {
              "$ref": "#/components/schemas/Interface"
            },
            "secure_boot": {
              "type": "boolean"
            },
            "vertualized": {
              "type": "boolean"
            },
            "board_serial": {
              "$ref": "#/components/schemas/OptionBoardSerial"
            },
            "connection_price": {
              "type": "integer"
            }
          }
        },
        "NodeWithNestedCapacity": {
          "title": "NodeWithNestedCapacity",
          "description": "grid node with nested capacity object",
          "properties": {
            "id": {
              "type": "string"
            },
            "node_id": {
              "type": "integer"
            },
            "farm_id": {
              "type": "integer"
            },
            "twin_id": {
              "type": "integer"
            },
            "country": {
              "type": "string"
            },
            "grid_version": {
              "type": "integer"
            },
            "city": {
              "type": "string"
            },
            "uptime": {
              "type": "string"
            },
            "created": {
              "type": "string"
            },
            "farming_policy_id": {
              "type": "integer"
            },
            "updated_at": {
              "type": "string"
            },
            "capacity": {
              "$ref": "#/components/schemas/CapacityResult"
            },
            "location": {
              "$ref": "#/components/schemas/Location"
            },
            "public_config": {
              "$ref": "#/components/schemas/PublicConfig"
            },
            "status": {
              "type": "string"
            },
            "certification_type": {
              "type": "string"
            },
            "dedicated": {
              "type": "boolean"
            },
            "rent_contract_id": {
              "type": "integer"
            },
            "rented_by_twin_id": {
              "type": "integer"
            },
            "serial_number": {
              "type": "string"
            }
          }
        },
        "CapacityResult": {
          "title": "CapacityResult",
          "properties": {
            "total": {
              "$ref": "#/components/schemas/Capacity"
            },
            "used": {
              "$ref": "#/components/schemas/Capacity"
            }
          }
        },
        "PublicConfig": {
          "title": "PublicConfig",
          "description": "PublicConfig is the configuration of the interface that is connected to the public internet",
          "properties": {
            "type_": {
              "type": "string"
            },
            "ipv4": {
              "description": "Type define if we need to use the Vlan field or the MacVlan",
              "type": "string"
            },
            "ipv6": {
              "type": "string"
            },
            "gw4": {
              "type": "string"
            },
            "gw6": {
              "type": "string"
            },
            "domain": {
              "type": "string"
            }
          }
        },
        "Capacity": {
          "title": "Capacity",
          "properties": {
            "cru": {
              "type": "string"
            },
            "hru": {
              "type": "string"
            },
            "sru": {
              "type": "string"
            },
            "mru": {
              "type": "string"
            },
            "ipv4u": {
              "type": "string"
            }
          }
        },
        "Location": {
          "title": "Location",
          "properties": {
            "city": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "latitude": {
              "type": "string"
            },
            "longitude": {
              "type": "string"
            }
          }
        },
        "Limit": {
          "title": "Limit",
          "properties": {
            "size": {
              "type": "string"
            },
            "page": {
              "type": "string"
            },
            "ret_count": {
              "type": "boolean"
            },
            "randomize": {
              "type": "boolean"
            }
          }
        },
        "Twin": {
          "title": "Twin",
          "properties": {
            "id": {
              "type": "integer"
            },
            "account_id": {
              "type": "string"
            },
            "entities": {
              "$ref": "#/components/schemas/EntityProof"
            }
          }
        },
        "Counters": {
          "title": "Counters",
          "description": "Counters for grid statistics",
          "properties": {
            "nodes": {
              "type": "string"
            },
            "farms": {
              "type": "string"
            },
            "countries": {
              "type": "string"
            },
            "total_cru": {
              "type": "string"
            },
            "total_sru": {
              "type": "string"
            },
            "total_mru": {
              "type": "string"
            },
            "total_hru": {
              "type": "string"
            },
            "public_ips": {
              "type": "string"
            },
            "access_nodes": {
              "type": "string"
            },
            "gateways": {
              "type": "string"
            },
            "twins": {
              "type": "string"
            },
            "contracts": {
              "type": "string"
            },
            "nodes_distribution": {
              "type": "object"
            }
          }
        },
        "NodeStatus": {
          "title": "NodeStatus",
          "properties": {
            "status": {
              "type": "string"
            }
          }
        },
        "Contract": {
          "title": "Contract",
          "properties": {
            "version": {
              "type": "integer"
            },
            "state": {
              "$ref": "#/components/schemas/ContractState"
            },
            "contract_id": {
              "type": "string"
            },
            "twin_id": {
              "type": "integer"
            },
            "contract_type": {
              "$ref": "#/components/schemas/ContractType"
            },
            "solution_provider_id": {
              "$ref": "#/components/schemas/OptionU64"
            }
          }
        },
        "ContractBilling": {
          "title": "ContractBilling",
          "properties": {
            "amount_billed": {
              "type": "string"
            },
            "discount_received": {
              "type": "string"
            },
            "timestamp": {
              "type": "string"
            }
          }
        },
        "Farm": {
          "title": "Farm",
          "description": "Farm type",
          "properties": {
            "version": {
              "type": "integer"
            },
            "id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "twin_id": {
              "type": "integer"
            },
            "pricing_policy_id": {
              "type": "integer"
            },
            "certification_type": {
              "$ref": "#/components/schemas/OptionCertificationType"
            },
            "public_ips": {
              "$ref": "#/components/schemas/PublicIP"
            },
            "dedicated_farm": {
              "type": "boolean"
            },
            "farming_policies_limit": {
              "$ref": "#/components/schemas/OptionFarmingPoliciesLimit"
            }
          }
        },
        "PublicIP": {
          "title": "PublicIP",
          "description": "PublicIP workload arguments",
          "properties": {
            "v4": {
              "type": "boolean"
            },
            "v6": {
              "description": "V4 use one of the reserved Ipv4 from your contract. The Ipv4 itself costs money + the network traffic",
              "type": "boolean"
            }
          }
        },
        "Event": {
          "title": "Event",
          "properties": {
            "id": {
              "type": "string"
            },
            "pubkey": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "kind": {
              "type": "integer"
            },
            "tags": {
              "type": "array"
            },
            "content": {
              "type": "string"
            },
            "sig": {
              "description": "extra map[string]any",
              "type": "string"
            }
          }
        },
        "TextNote": {
          "title": "TextNote",
          "properties": {
            "tags": {
              "type": "array"
            },
            "content": {
              "type": "string"
            }
          }
        },
        "Metadata": {
          "title": "Metadata",
          "properties": {
            "type_": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "encryption_algorithm": {
              "type": "string"
            },
            "encryption_key": {
              "type": "string"
            },
            "backends": {
              "$ref": "#/components/schemas/Backend"
            }
          }
        },
        "NostrMetadata": {
          "title": "NostrMetadata",
          "properties": {
            "name": {
              "type": "string"
            },
            "about": {
              "type": "string"
            },
            "picture": {
              "type": "string"
            }
          }
        },
        "DirectMessage": {
          "title": "DirectMessage",
          "properties": {
            "receiver": {
              "type": "string"
            },
            "tags": {
              "type": "array"
            },
            "content": {
              "type": "string"
            }
          }
        },
        "Stall": {
          "title": "Stall",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "currency": {
              "type": "string"
            },
            "shipping": {
              "$ref": "#/components/schemas/Shipping"
            }
          }
        },
        "StallCreateInput": {
          "title": "StallCreateInput",
          "properties": {
            "tags": {
              "type": "array"
            },
            "stall": {
              "$ref": "#/components/schemas/Stall"
            }
          }
        },
        "Shipping": {
          "title": "Shipping",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "cost": {
              "type": "string"
            },
            "countries": {
              "type": "array"
            }
          }
        },
        "Product": {
          "title": "Product",
          "properties": {
            "id": {
              "type": "string"
            },
            "stall_id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "images": {
              "type": "array"
            },
            "currency": {
              "type": "string"
            },
            "price": {
              "type": "string"
            },
            "quantity": {
              "type": "integer"
            },
            "specs": {
              "type": "array"
            }
          }
        },
        "ProductCreateInput": {
          "title": "ProductCreateInput",
          "properties": {
            "tags": {
              "type": "array"
            },
            "product": {
              "$ref": "#/components/schemas/Product"
            }
          }
        },
        "ContractState": {
          "title": "ContractState",
          "properties": {
            "is_created": {
              "type": "boolean"
            },
            "is_deleted": {
              "type": "boolean"
            },
            "is_grace_period": {
              "type": "boolean"
            },
            "as_grace_period_blocknumber": {
              "type": "string"
            }
          }
        },
        "NodeContract": {
          "title": "NodeContract",
          "properties": {
            "node": {
              "type": "integer"
            },
            "deployment_hash": {
              "type": "string"
            },
            "deployment_data": {
              "type": "string"
            },
            "public_ips": {
              "$ref": "#/components/schemas/PublicIP"
            }
          }
        },
        "NameContract": {
          "title": "NameContract",
          "properties": {
            "name": {
              "type": "string"
            }
          }
        },
        "RentContract": {
          "title": "RentContract",
          "properties": {
            "node": {
              "type": "integer"
            }
          }
        },
        "ContractType": {
          "title": "ContractType",
          "properties": {
            "is_node_contract": {
              "type": "boolean"
            },
            "node_contract": {
              "$ref": "#/components/schemas/NodeContract"
            },
            "is_name_contract": {
              "type": "boolean"
            },
            "name_contract": {
              "$ref": "#/components/schemas/NameContract"
            },
            "is_rent_contract": {
              "type": "boolean"
            },
            "rent_contract": {
              "$ref": "#/components/schemas/RentContract"
            }
          }
        },
        "OptionCertificationType": {
          "title": "OptionCertificationType",
          "properties": {
            "is_not_certified": {
              "type": "boolean"
            },
            "is_gold": {
              "type": "boolean"
            }
          }
        },
        "OptionFarmingPoliciesLimit": {
          "title": "OptionFarmingPoliciesLimit",
          "properties": {
            "has_value": {
              "type": "boolean"
            },
            "as_value": {
              "$ref": "#/components/schemas/FarmingPoliciesLimit"
            }
          }
        },
        "FarmingPoliciesLimit": {
          "title": "FarmingPoliciesLimit",
          "properties": {
            "farming_policy_id": {
              "type": "integer"
            },
            "cu": {
              "$ref": "#/components/schemas/OptionU64"
            },
            "su": {
              "$ref": "#/components/schemas/OptionU64"
            },
            "end": {
              "$ref": "#/components/schemas/OptionU64"
            },
            "node_count": {
              "$ref": "#/components/schemas/OptionU32"
            },
            "node_certification": {
              "type": "boolean"
            }
          }
        },
        "OptionU32": {
          "title": "OptionU32",
          "properties": {
            "has_value": {
              "type": "boolean"
            },
            "as_value": {
              "type": "integer"
            }
          }
        },
        "OptionU64": {
          "title": "OptionU64",
          "properties": {
            "has_value": {
              "type": "boolean"
            },
            "as_value": {
              "type": "string"
            }
          }
        },
        "OptionBoardSerial": {
          "title": "OptionBoardSerial",
          "properties": {
            "has_value": {
              "type": "boolean"
            },
            "as_value": {
              "type": "string"
            }
          }
        },
        "Resources": {
          "title": "Resources",
          "properties": {
            "hru": {
              "type": "string"
            },
            "sru": {
              "type": "string"
            },
            "cru": {
              "type": "string"
            },
            "mru": {
              "type": "string"
            }
          }
        },
        "OptionPublicConfig": {
          "title": "OptionPublicConfig",
          "properties": {
            "has_value": {
              "type": "boolean"
            },
            "as_value": {
              "$ref": "#/components/schemas/PublicConfig"
            }
          }
        },
        "IP": {
          "title": "IP",
          "properties": {
            "ip": {
              "type": "string"
            },
            "gw": {
              "type": "string"
            }
          }
        },
        "Interface": {
          "title": "Interface",
          "properties": {
            "name": {
              "type": "string"
            },
            "mac": {
              "type": "string"
            },
            "ips": {
              "type": "array"
            }
          }
        },
        "EntityProof": {
          "title": "EntityProof",
          "properties": {
            "entity_id": {
              "type": "integer"
            },
            "signature": {
              "type": "string"
            }
          }
        },
        "CreateTwin": {
          "title": "CreateTwin",
          "properties": {
            "relay": {
              "type": "string"
            },
            "pk": {
              "type": "string"
            }
          }
        },
        "AcceptTermsAndConditions": {
          "title": "AcceptTermsAndConditions",
          "properties": {
            "link": {
              "type": "string"
            },
            "hash": {
              "type": "string"
            }
          }
        },
        "GetContractWithHash": {
          "title": "GetContractWithHash",
          "properties": {
            "node_id": {
              "type": "integer"
            },
            "hash": {
              "type": "string"
            }
          }
        },
        "CreateNodeContract": {
          "title": "CreateNodeContract",
          "properties": {
            "node_id": {
              "type": "integer"
            },
            "body": {
              "type": "string"
            },
            "hash": {
              "type": "string"
            },
            "public_ips": {
              "type": "integer"
            },
            "solution_provider_id": {
              "type": "string"
            }
          }
        },
        "CreateRentContract": {
          "title": "CreateRentContract",
          "properties": {
            "node_id": {
              "type": "integer"
            },
            "solution_provider_id": {
              "type": "string"
            }
          }
        },
        "ServiceContractCreate": {
          "title": "ServiceContractCreate",
          "properties": {
            "service": {
              "type": "string"
            },
            "consumer": {
              "type": "string"
            }
          }
        },
        "ServiceContractBill": {
          "title": "ServiceContractBill",
          "properties": {
            "contract_id": {
              "type": "string"
            },
            "variable_amount": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        },
        "SetServiceContractFees": {
          "title": "SetServiceContractFees",
          "properties": {
            "contract_id": {
              "type": "string"
            },
            "base_fee": {
              "type": "string"
            },
            "variable_fee": {
              "type": "string"
            }
          }
        },
        "ServiceContractSetMetadata": {
          "title": "ServiceContractSetMetadata",
          "properties": {
            "contract_id": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        },
        "PublicIPInput": {
          "title": "PublicIPInput",
          "properties": {
            "ip": {
              "type": "string"
            },
            "gateway": {
              "type": "string"
            }
          }
        },
        "CreateFarm": {
          "title": "CreateFarm",
          "properties": {
            "name": {
              "type": "string"
            },
            "public_ips": {
              "$ref": "#/components/schemas/PublicIPInput"
            }
          }
        },
        "FilterOptions": {
          "title": "FilterOptions",
          "properties": {
            "farm_id": {
              "description": "will try to use farmerbot if found on this farm.",
              "type": "string"
            },
            "public_config": {
              "description": "useful with filtering gateway nodes.",
              "type": "boolean"
            },
            "public_ips_count": {
              "description": "free ips for the node.",
              "type": "integer"
            },
            "dedicated": {
              "description": "if the node is dedicated or not.",
              "type": "boolean"
            },
            "mru": {
              "description": "free memory on node in MB.",
              "type": "string"
            },
            "hru": {
              "description": "free hdd storage on node in GB.",
              "type": "string"
            },
            "sru": {
              "description": "free ssd storage on node in GB.",
              "type": "string"
            }
          }
        },
        "Credentials": {
          "title": "Credentials",
          "description": "The credentials required before executing any other tfgrid rpc.",
          "properties": {
            "mnemonic": {
              "description": "secret mnemonic",
              "type": "string"
            },
            "network": {
              "description": "grid network [dev, qa, test, main]",
              "type": "string"
            }
          }
        },
        "GatewayFQDN": {
          "title": "GatewayFQDN",
          "description": "NOTE: is there any need to translate json here?",
          "properties": {
            "name": {
              "type": "string"
            },
            "node_id": {
              "type": "integer"
            },
            "tls_passthrough": {
              "type": "boolean"
            },
            "backends": {
              "type": "array"
            },
            "fqdn": {
              "type": "string"
            }
          }
        },
        "GatewayFQDNResult": {
          "title": "GatewayFQDNResult",
          "properties": {
            "name": {
              "type": "string"
            },
            "node_id": {
              "type": "integer"
            },
            "tls_passthrough": {
              "type": "boolean"
            },
            "backends": {
              "type": "array"
            },
            "fqdn": {
              "description": "computed",
              "type": "string"
            },
            "contract_id": {
              "type": "integer"
            }
          }
        },
        "GatewayName": {
          "title": "GatewayName",
          "properties": {
            "name": {
              "type": "string"
            },
            "node_id": {
              "type": "integer"
            },
            "tls_passthrough": {
              "type": "boolean"
            },
            "backends": {
              "type": "array"
            }
          }
        },
        "GatewayNameResult": {
          "title": "GatewayNameResult",
          "properties": {
            "name": {
              "type": "string"
            },
            "node_id": {
              "type": "integer"
            },
            "tls_passthrough": {
              "type": "boolean"
            },
            "backends": {
              "type": "array"
            },
            "fqdn": {
              "description": "computed",
              "type": "string"
            },
            "name_contract_id": {
              "description": "the full domain name",
              "type": "integer"
            },
            "contract_id": {
              "type": "integer"
            }
          }
        },
        "K8sCluster": {
          "title": "K8sCluster",
          "properties": {
            "name": {
              "type": "string"
            },
            "token": {
              "type": "string"
            },
            "ssh_key": {
              "type": "string"
            },
            "master": {
              "$ref": "#/components/schemas/K8sNode"
            },
            "workers": {
              "$ref": "#/components/schemas/K8sNode"
            }
          }
        },
        "K8sClusterResult": {
          "title": "K8sClusterResult",
          "properties": {
            "name": {
              "type": "string"
            },
            "token": {
              "type": "string"
            },
            "ssh_key": {
              "type": "string"
            },
            "master": {
              "$ref": "#/components/schemas/K8sNode"
            },
            "workers": {
              "$ref": "#/components/schemas/K8sNode"
            }
          }
        },
        "K8sNode": {
          "title": "K8sNode",
          "properties": {
            "name": {
              "type": "string"
            },
            "node_id": {
              "type": "integer"
            },
            "farm_id": {
              "type": "integer"
            },
            "public_ip": {
              "type": "boolean"
            },
            "public_ip6": {
              "type": "boolean"
            },
            "planetary": {
              "type": "boolean"
            },
            "flist": {
              "type": "string"
            },
            "cpu": {
              "type": "integer"
            },
            "memory": {
              "description": "number of vcpu cores.",
              "type": "integer"
            },
            "disk_size": {
              "description": "in MBs in GB, monted in /mydisk",
              "type": "integer"
            }
          }
        },
        "K8sNodeResult": {
          "title": "K8sNodeResult",
          "properties": {
            "name": {
              "type": "string"
            },
            "node_id": {
              "type": "integer"
            },
            "farm_id": {
              "type": "integer"
            },
            "public_ip": {
              "type": "boolean"
            },
            "public_ip6": {
              "type": "boolean"
            },
            "planetary": {
              "type": "boolean"
            },
            "flist": {
              "type": "string"
            },
            "cpu": {
              "type": "integer"
            },
            "memory": {
              "type": "integer"
            },
            "disk_size": {
              "description": "computed",
              "type": "integer"
            },
            "computed_ip4": {
              "type": "string"
            },
            "computed_ip6": {
              "type": "string"
            },
            "wg_ip": {
              "type": "string"
            },
            "ygg_ip": {
              "type": "string"
            }
          }
        },
        "KeyValue": {
          "title": "KeyValue",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          }
        },
        "MachinesModel": {
          "title": "MachinesModel",
          "properties": {
            "name": {
              "type": "string"
            },
            "network": {
              "$ref": "#/components/schemas/Network"
            },
            "machines": {
              "$ref": "#/components/schemas/Machine"
            },
            "metadata": {
              "type": "string"
            },
            "description": {
              "type": "string"
            }
          }
        },
        "MachinesResult": {
          "title": "MachinesResult",
          "properties": {
            "name": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "network": {
              "$ref": "#/components/schemas/NetworkResult"
            },
            "machines": {
              "$ref": "#/components/schemas/MachineResult"
            }
          }
        },
        "Machine": {
          "title": "Machine",
          "properties": {
            "name": {
              "type": "string"
            },
            "node_id": {
              "type": "integer"
            },
            "farm_id": {
              "type": "integer"
            },
            "flist": {
              "type": "string"
            },
            "entrypoint": {
              "type": "string"
            },
            "public_ip": {
              "type": "boolean"
            },
            "public_ip6": {
              "type": "boolean"
            },
            "planetary": {
              "type": "boolean"
            },
            "cpu": {
              "description": "number of vcpu cores",
              "type": "integer"
            },
            "memory": {
              "description": "in MBs",
              "type": "string"
            },
            "rootfs_size": {
              "description": "in MBs",
              "type": "string"
            },
            "zlogs": {
              "$ref": "#/components/schemas/Zlog"
            },
            "disks": {
              "$ref": "#/components/schemas/Disk"
            },
            "qsfs": {
              "$ref": "#/components/schemas/QSFS"
            },
            "env_vars": {
              "description": "ex: { \"SSH_KEY\": \"..\" }",
              "type": "object"
            },
            "description": {
              "type": "string"
            }
          }
        },
        "MachineResult": {
          "title": "MachineResult",
          "properties": {
            "name": {
              "type": "string"
            },
            "node_id": {
              "type": "integer"
            },
            "farm_id": {
              "type": "integer"
            },
            "flist": {
              "type": "string"
            },
            "entrypoint": {
              "type": "string"
            },
            "public_ip": {
              "type": "boolean"
            },
            "public_ip6": {
              "type": "boolean"
            },
            "planetary": {
              "type": "boolean"
            },
            "cpu": {
              "type": "integer"
            },
            "memory": {
              "type": "string"
            },
            "rootfs_size": {
              "type": "string"
            },
            "zlogs": {
              "$ref": "#/components/schemas/Zlog"
            },
            "disks": {
              "$ref": "#/components/schemas/DiskResult"
            },
            "qsfs": {
              "$ref": "#/components/schemas/QSFSResult"
            },
            "env_vars": {
              "type": "object"
            },
            "description": {
              "description": "computed",
              "type": "string"
            },
            "computed_ip4": {
              "type": "string"
            },
            "computed_ip6": {
              "type": "string"
            },
            "wireguard_ip": {
              "type": "string"
            },
            "ygg_ip": {
              "type": "string"
            }
          }
        },
        "Disk": {
          "title": "Disk",
          "properties": {
            "size": {
              "type": "integer"
            },
            "mountpoint": {
              "description": "disk size in GBs",
              "type": "string"
            },
            "description": {
              "type": "string"
            }
          }
        },
        "DiskResult": {
          "title": "DiskResult",
          "properties": {
            "size": {
              "type": "integer"
            },
            "mountpoint": {
              "description": "disk size in GBs",
              "type": "string"
            },
            "description": {
              "description": "computed",
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "QSFS": {
          "title": "QSFS",
          "properties": {
            "name": {
              "type": "string"
            },
            "mountpoint": {
              "type": "string"
            },
            "qsfs_zdbs_name": {
              "type": "string"
            },
            "encryption_key": {
              "type": "string"
            },
            "cache": {
              "type": "integer"
            },
            "minimal_shards": {
              "type": "integer"
            },
            "expected_shards": {
              "type": "integer"
            },
            "redundant_groups": {
              "type": "integer"
            },
            "redundant_nodes": {
              "type": "integer"
            },
            "encryption_algorithm": {
              "type": "string"
            },
            "compression_algorithm": {
              "type": "string"
            },
            "metadata": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": {
              "type": "string"
            },
            "max_zdb_data_dir_size": {
              "type": "integer"
            },
            "groups": {
              "$ref": "#/components/schemas/Group"
            }
          }
        },
        "QSFSResult": {
          "title": "QSFSResult",
          "properties": {
            "name": {
              "type": "string"
            },
            "mountpoint": {
              "type": "string"
            },
            "qsfs_zdbs_name": {
              "type": "string"
            },
            "encryption_key": {
              "type": "string"
            },
            "cache": {
              "type": "integer"
            },
            "minimal_shards": {
              "type": "integer"
            },
            "expected_shards": {
              "type": "integer"
            },
            "redundant_groups": {
              "type": "integer"
            },
            "redundant_nodes": {
              "type": "integer"
            },
            "encryption_algorithm": {
              "type": "string"
            },
            "compression_algorithm": {
              "type": "string"
            },
            "metadata": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": {
              "type": "string"
            },
            "max_zdb_data_dir_size": {
              "type": "integer"
            },
            "groups": {
              "$ref": "#/components/schemas/Group"
            },
            "metrics_endpoint": {
              "type": "string"
            }
          }
        },
        "Zlog": {
          "title": "Zlog",
          "properties": {
            "output": {
              "type": "string"
            }
          }
        },
        "Group": {
          "title": "Group",
          "properties": {
            "backends": {
              "$ref": "#/components/schemas/Backend"
            }
          }
        },
        "Backend": {
          "title": "Backend",
          "properties": {
            "address": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "password": {
              "type": "string"
            }
          }
        },
        "Network": {
          "title": "Network",
          "properties": {
            "ip_range": {
              "type": "string"
            },
            "add_wireguard_access": {
              "type": "boolean"
            }
          }
        },
        "NetworkResult": {
          "title": "NetworkResult",
          "properties": {
            "name": {
              "type": "string"
            },
            "ip_range": {
              "description": "computed",
              "type": "string"
            },
            "wireguard_config": {
              "type": "string"
            }
          }
        },
        "MachinesGet": {
          "title": "MachinesGet",
          "description": "struct AddMachine { machine Machine project_name string } struct RemoveMachine { machine_name string project_name string }",
          "properties": {
            "model_name": {
              "type": "string"
            },
            "project_name": {
              "type": "string"
            }
          }
        },
        "MachinesDeploy": {
          "title": "MachinesDeploy",
          "properties": {
            "model": {
              "$ref": "#/components/schemas/MachinesModel"
            },
            "project_name": {
              "type": "string"
            }
          }
        },
        "ZMount": {
          "title": "ZMount",
          "description": "ZMount defines a mount point",
          "properties": {
            "size": {
              "type": "string"
            }
          }
        },
        "ZMachine": {
          "title": "ZMachine",
          "description": "ZMachine reservation data",
          "properties": {
            "flist": {
              "type": "string"
            },
            "network": {
              "$ref": "#/components/schemas/MachineNetwork"
            },
            "size": {
              "description": "Network configuration for machine network",
              "type": "string"
            },
            "compute_capacity": {
              "$ref": "#/components/schemas/MachineCapacity"
            },
            "mounts": {
              "$ref": "#/components/schemas/MachineMount"
            },
            "entrypoint": {
              "description": "Mounts configure mounts/disks attachments to this machine",
              "type": "string"
            },
            "env": {
              "description": "entrypoint of the container, if not set the configured one from the flist is going to be used",
              "type": "object"
            },
            "corex": {
              "description": "Env variables available for a container",
              "type": "boolean"
            }
          }
        },
        "ZMachineResult": {
          "title": "ZMachineResult",
          "description": "ZMachineResult result returned by VM reservation",
          "properties": {
            "id": {
              "type": "string"
            },
            "ip": {
              "type": "string"
            },
            "ygg_ip": {
              "type": "string"
            },
            "console_url": {
              "description": "yggdrasil ip of the machine",
              "type": "string"
            }
          }
        },
        "MachineNetwork": {
          "title": "MachineNetwork",
          "properties": {
            "public_ip": {
              "type": "string"
            },
            "planetary": {
              "type": "boolean"
            },
            "interfaces": {
              "$ref": "#/components/schemas/MachineInterface"
            }
          }
        },
        "MachineInterface": {
          "title": "MachineInterface",
          "properties": {
            "network": {
              "type": "string"
            },
            "ip": {
              "type": "string"
            }
          }
        },
        "MachineCapacity": {
          "title": "MachineCapacity",
          "properties": {
            "cpu": {
              "type": "u8"
            },
            "memory": {
              "type": "string"
            }
          }
        },
        "MachineMount": {
          "title": "MachineMount",
          "properties": {
            "name": {
              "type": "string"
            },
            "mountpoint": {
              "type": "string"
            }
          }
        },
        "Zlogs": {
          "title": "Zlogs",
          "description": "Zlogs is a workload that enables users to stream logs from a zmachine to some url",
          "properties": {
            "zmachine": {
              "type": "string"
            },
            "output": {
              "description": "zmachine name to stream logs for",
              "type": "string"
            }
          }
        },
        "ZDBWorkload": {
          "title": "ZDBWorkload",
          "description": "ZDB workload info",
          "properties": {
            "size": {
              "type": "string"
            },
            "mode": {
              "description": "size of the zdb in GB",
              "type": "string"
            },
            "password": {
              "description": "mode of the zdb: \"user\" or \"seq\"",
              "type": "string"
            },
            "public": {
              "description": "password for the zdb",
              "type": "boolean"
            }
          }
        },
        "ZDBResultData": {
          "title": "ZDBResultData",
          "description": "ZDBResultData contains zdb reservation result",
          "properties": {
            "namespace": {
              "description": "TODO: change json representation snake case after resolving #1952 in zos",
              "type": "string"
            },
            "ips": {
              "description": "namespace of the zdb",
              "type": "array"
            },
            "port": {
              "description": "Computed IPs of the ZDB. Two IPs are returned: a public IPv6, and a YggIP, in this order",
              "type": "integer"
            }
          }
        },
        "NetworkWorkload": {
          "title": "NetworkWorkload",
          "description": "NetworkWorkload contains the network workload reservation arguments",
          "properties": {
            "network_ip_range": {
              "$ref": "#/components/schemas/IPNet"
            },
            "subnet": {
              "$ref": "#/components/schemas/IPNet"
            },
            "wg_private_key": {
              "description": "IPV4 subnet for this network resource, this must be a valid subnet of the entire network ip range.",
              "type": "string"
            },
            "wg_listen_port": {
              "description": "The private wg key of this node (this peer) which is installing this network workload right now.",
              "type": "integer"
            },
            "peers": {
              "$ref": "#/components/schemas/Peer"
            }
          }
        },
        "IPNet": {
          "title": "IPNet",
          "properties": {
            "ip": {
              "type": "string"
            },
            "mask": {
              "type": "string"
            }
          }
        },
        "Peer": {
          "title": "Peer",
          "properties": {
            "subnet": {
              "$ref": "#/components/schemas/IPNet"
            },
            "wg_public_key": {
              "type": "string"
            },
            "allowed_ips": {
              "$ref": "#/components/schemas/IPNet"
            },
            "endpoint": {
              "type": "string"
            }
          }
        },
        "PublicIPResult": {
          "title": "PublicIPResult",
          "description": "PublicIPResult result returned by publicIP reservation",
          "properties": {
            "ip": {
              "$ref": "#/components/schemas/IPNet"
            },
            "ipv6": {
              "$ref": "#/components/schemas/IPNet"
            },
            "gateway": {
              "description": "IPv6 of the VM.",
              "type": "string"
            }
          }
        },
        "GatewayNameProxyWorkload": {
          "title": "GatewayNameProxyWorkload",
          "description": "GatewayNameProxy workload argurments",
          "properties": {
            "tls_passthrough": {
              "type": "boolean"
            },
            "backends": {
              "description": "whether to pass tls traffic or not",
              "type": "array"
            },
            "network": {
              "description": "Backends are list of backend ips (only one is supported atm)",
              "type": "string"
            }
          }
        },
        "GatewayNameProxyResult": {
          "title": "GatewayNameProxyResult",
          "description": "GatewayNameProxy reservation result",
          "properties": {
            "fqdn": {
              "type": "string"
            }
          }
        },
        "GatewayFQDNProxyWorkload": {
          "title": "GatewayFQDNProxyWorkload",
          "description": "GatewayFQDNProxy workload arguments",
          "properties": {
            "tls_passthrough": {
              "type": "boolean"
            },
            "backends": {
              "description": "whether to pass tls traffic or not",
              "type": "array"
            },
            "fqdn": {
              "description": "Backends are list of backend ips (only one is supported atm)",
              "type": "string"
            }
          }
        },
        "ZDB": {
          "title": "ZDB",
          "properties": {
            "node_id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "public": {
              "type": "boolean"
            },
            "size": {
              "type": "integer"
            },
            "description": {
              "description": "in GB",
              "type": "string"
            },
            "mode": {
              "description": "user, seq",
              "type": "string"
            }
          }
        },
        "ZDBResult": {
          "title": "ZDBResult",
          "properties": {
            "node_id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "public": {
              "type": "boolean"
            },
            "size": {
              "type": "integer"
            },
            "description": {
              "type": "string"
            },
            "mode": {
              "description": "computed",
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "port": {
              "type": "integer"
            },
            "ips": {
              "type": "array"
            }
          }
        },
        "ZOSNodeRequest": {
          "title": "ZOSNodeRequest",
          "description": "A request that contains zos node calls information",
          "properties": {
            "node_id": {
              "type": "integer"
            },
            "data": {
              "$ref": "#/components/schemas/ZOSNodeRequestData"
            }
          }
        },
        "Deployment": {
          "title": "Deployment",
          "description": "Deployment is a ZOS deployment structure",
          "properties": {
            "version": {
              "type": "integer"
            },
            "twin_id": {
              "description": "deployment version",
              "type": "integer"
            },
            "contract_id": {
              "description": "twin id of the user",
              "type": "string"
            },
            "metadata": {
              "description": "contract id of the deployment",
              "type": "string"
            },
            "description": {
              "description": "metdata of the deployment",
              "type": "string"
            },
            "expiration": {
              "description": "description is human readable description of the deployment",
              "type": "string"
            },
            "signature_requirement": {
              "$ref": "#/components/schemas/SignatureRequirement"
            },
            "workloads": {
              "$ref": "#/components/schemas/Workload"
            }
          }
        },
        "DeploymentRaw": {
          "title": "DeploymentRaw",
          "properties": {
            "version": {
              "type": "integer"
            },
            "twin_id": {
              "type": "integer"
            },
            "contract_id": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "expiration": {
              "type": "string"
            },
            "signature_requirement": {
              "$ref": "#/components/schemas/SignatureRequirement"
            },
            "workloads": {
              "$ref": "#/components/schemas/WorkloadRaw"
            }
          }
        },
        "SignatureRequirement": {
          "title": "SignatureRequirement",
          "description": "SignatureRequirement struct describes the signatures that are needed to be valid for the node to accept the deployment",
          "properties": {
            "requests": {
              "$ref": "#/components/schemas/SignatureRequest"
            },
            "weight_required": {
              "description": "signature requests",
              "type": "integer"
            },
            "signatures": {
              "$ref": "#/components/schemas/Signature"
            },
            "signature_style": {
              "description": "list of actual signatures",
              "type": "string"
            }
          }
        },
        "SignatureRequest": {
          "title": "SignatureRequest",
          "description": "SignatureRequest describes which twin should sign the deployment and how much this signature weighs",
          "properties": {
            "twin_id": {
              "type": "integer"
            },
            "required": {
              "description": "twin id of the signer",
              "type": "boolean"
            },
            "weight": {
              "description": "true if this twin is required to sign the deployment",
              "type": "integer"
            }
          }
        },
        "Signature": {
          "title": "Signature",
          "description": "Signature contains actual signature information",
          "properties": {
            "twin_id": {
              "type": "integer"
            },
            "signature": {
              "description": "twin id of the signer",
              "type": "string"
            },
            "signature_type": {
              "description": "signature string",
              "type": "string"
            }
          }
        },
        "Workload": {
          "title": "Workload",
          "description": "Workload contains workload information",
          "properties": {
            "version": {
              "type": "integer"
            },
            "name": {
              "description": "workload verison",
              "type": "string"
            },
            "workload_type": {
              "description": "workload name, must be unique per deployment",
              "type": "string"
            },
            "data": {
              "$ref": "#/components/schemas/WorkloadData"
            },
            "metadata": {
              "description": "contains the workload type arguments.",
              "type": "string"
            },
            "description": {
              "description": "metadata is user specific meta attached to deployment",
              "type": "string"
            },
            "result": {
              "$ref": "#/components/schemas/Result"
            }
          }
        },
        "WorkloadRaw": {
          "title": "WorkloadRaw",
          "properties": {
            "version": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "workload_type": {
              "type": "string"
            },
            "data": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "result": {
              "$ref": "#/components/schemas/ResultRaw"
            }
          }
        },
        "Result": {
          "title": "Result",
          "description": "Result is the struct filled by the node after a reservation object has been processed",
          "properties": {
            "created": {
              "type": "string"
            },
            "state": {
              "description": "Time when the result is sent",
              "type": "string"
            },
            "message": {
              "description": "state ate of the deployment (ok,error, ...)",
              "type": "string"
            },
            "data": {
              "$ref": "#/components/schemas/ResultData"
            }
          }
        },
        "ResultRaw": {
          "title": "ResultRaw",
          "properties": {
            "created": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "string"
            }
          }
        },
        "SystemVersion": {
          "title": "SystemVersion",
          "description": "SystemVersion contains system version information",
          "properties": {
            "zos": {
              "type": "string"
            },
            "zinit": {
              "description": "zos version",
              "type": "string"
            }
          }
        },
        "DMI": {
          "title": "DMI",
          "description": "Contains DMI information of the node",
          "properties": {
            "tooling": {
              "$ref": "#/components/schemas/Tooling"
            },
            "sections": {
              "$ref": "#/components/schemas/Section"
            }
          }
        },
        "Tooling": {
          "title": "Tooling",
          "properties": {
            "aggregator": {
              "type": "string"
            },
            "decoder": {
              "type": "string"
            }
          }
        },
        "Section": {
          "title": "Section",
          "properties": {
            "handleline": {
              "type": "string"
            },
            "typestr": {
              "type": "string"
            },
            "type_": {
              "type": "integer"
            },
            "subsections": {
              "$ref": "#/components/schemas/Subsection"
            }
          }
        },
        "Subsection": {
          "title": "Subsection",
          "properties": {
            "title": {
              "type": "string"
            },
            "properties": {
              "$ref": "#/components/schemas/PropertyData"
            }
          }
        },
        "PropertyData": {
          "title": "PropertyData",
          "properties": {
            "value": {
              "type": "string"
            },
            "items": {
              "type": "array"
            }
          }
        },
        "Statistics": {
          "title": "Statistics",
          "description": "Statistics contains some info about the node like total and used resources",
          "properties": {
            "total": {
              "$ref": "#/components/schemas/Capacity"
            },
            "used": {
              "$ref": "#/components/schemas/Capacity"
            }
          }
        }
      }
    }
  }