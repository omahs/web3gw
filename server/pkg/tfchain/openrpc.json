{
  "openrpc": "1.0.0",
  "info": {
    "title": "tfchain JSON-RPC API",
    "version": "1.0.0"
  },
  "methods": [
    {
      "name": "tfchain.Load",
      "description": "Load your mnemonic with this call. Choose the network while doing so. The network should be one of: mainnet, testnet, qanet, devnet",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/Load"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfchain.Transfer",
      "description": "Transfer some amount to some destination. The destionation should be a SS58 address.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/Transfer"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfchain.Balance",
      "description": "Ask for the balance of an entity using this call. The address should be a SS58 address.",
      "params": [
        {
          "name": "address",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!i64",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "tfchain.Height",
      "description": "Get the current height of the chain.",
      "params": [
      ],
      "result": {
        "name": "!u64",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "tfchain.GetTwin",
      "description": "Get a twin by id.",
      "params": [
        {
          "name": "id",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "result": {
        "name": "Twin",
        "schema": {
          "$ref": "#\/components\/schemas\/Twin"
        }
      }
    },
    {
      "name": "tfchain.GetTwinByPubkey",
      "description": "Get the twin id that is bound to a SS58 address.",
      "params": [
        {
          "name": "address",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!u32",
        "schema": {
          "type": "integer"
        }
      }
    },
    {
      "name": "tfchain.CreateTwin",
      "description": "Create a twin. Provide the relay and your public key in this call. The result of this call contains your twin id.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/CreateTwin"
          }
        }
      ],
      "result": {
        "name": "!u32",
        "schema": {
          "type": "integer"
        }
      }
    },
    {
      "name": "tfchain.AcceptTermsAndConditions",
      "description": "Accepts terms and conditions. Provide the document link and document hash while executing this call.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/AcceptTermsAndConditions"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfchain.GetNode",
      "description": "Get a node by id.",
      "params": [
        {
          "name": "id",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "result": {
        "name": "Node",
        "schema": {
          "$ref": "#\/components\/schemas\/Node"
        }
      }
    },
    {
      "name": "tfchain.GetNodes",
      "description": "Get the nodes that belong to the farm with id. Returns a list of node ids.",
      "params": [
        {
          "name": "farm_id",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "result": {
        "name": "![]u32",
        "schema": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    {
      "name": "tfchain.GetFarm",
      "description": "Get farm by id.",
      "params": [
        {
          "name": "id",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "result": {
        "name": "Farm",
        "schema": {
          "$ref": "#\/components\/schemas\/Farm"
        }
      }
    },
    {
      "name": "tfchain.GetFarmByName",
      "description": "Get farm by name.",
      "params": [
        {
          "name": "name",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!u32",
        "schema": {
          "type": "integer"
        }
      }
    },
    {
      "name": "tfchain.CreateFarm",
      "description": "Create a farm. Provide a name an a list of public ips if there are any.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/CreateFarm"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfchain.GetContract",
      "description": "Get a contract by id. Contract can be any of the following types: node contract, name contract or rent contract.",
      "params": [
        {
          "name": "contract_id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Contract",
        "schema": {
          "$ref": "#\/components\/schemas\/Contract"
        }
      }
    },
    {
      "name": "tfchain.GetContractIdByNameRegistration",
      "description": "Get contract by name registration. Returns the id of the contract.",
      "params": [
        {
          "name": "name",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!u64",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "tfchain.GetContractWithHash",
      "description": "Get contract by hash. Returns the contract id.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/GetContractWithHash"
          }
        }
      ],
      "result": {
        "name": "!u64",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "tfchain.GetNodeContracts",
      "description": "Get contracts belonging to a node. Returns a list of contract ids.",
      "params": [
        {
          "name": "node_id",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "result": {
        "name": "![]u64",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "tfchain.CreateNameContract",
      "description": "Create a name contract. Provide the dns name via this call. Returns the id of the contract it creates.",
      "params": [
        {
          "name": "name",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!u64",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "tfchain.CreateNodeContract",
      "description": "Create a node contract. Provide the node id, body, hash, how many public ips you want to use and optionally the solution provider id.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/CreateNodeContract"
          }
        }
      ],
      "result": {
        "name": "!u64",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "tfchain.CreateRentContract",
      "description": "Create a rent contract. Provide the node id of the node you want to rent and optionally the solution provider id.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/CreateRentContract"
          }
        }
      ],
      "result": {
        "name": "!u64",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "tfchain.ServiceContractCreate",
      "description": "Create a service contract. Provide the SS58 addresses of the service and the consumer.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/ServiceContractCreate"
          }
        }
      ],
      "result": {
        "name": "!u64",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "tfchain.ServiceContractApprove",
      "description": "Approve a service contract. Provide the contract id to do so. Approving the contract is only allowed if the agreement is ready and only by the consumer or the service.",
      "params": [
        {
          "name": "contract_id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfchain.ServiceContractBill",
      "description": "Bill a service contract. Provide the contract id, variable_amount and some metadata. The contract can only be billed if both service and consumer have approved the contract.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/ServiceContractBill"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfchain.ServiceContractCancel",
      "description": "Cancel a service contract. Provide the contract id to do so.",
      "params": [
        {
          "name": "contract_id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfchain.ServiceContractReject",
      "description": "Reject a service contract. Provide the contract id to do so. Only the service or the consumer is allowed to do so and only if it reached a state of agreement. The contract will be deleted when at the first call of either the service or the consumer.",
      "params": [
        {
          "name": "contract_id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfchain.ServiceContractSetFees",
      "description": "Set the service contract fees. Provide the contract id, the base fee and the variable fee. Only the service is allowed to set the fees and only if the contract is not approved by both parties yet. The state is set to agreemen if the metadata has been set.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/SetServiceContractFees"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfchain.ServiceContractSetMetadata",
      "description": "Set the service contract metadata. Provide contract id and the metadata. Only service or consumer can set the metadata. The metadata can be modified by calling this method again but only if the contract is not yet approved by both parties. The base fee cannot be 0.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/ServiceContractSetMetadata"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfchain.CancelContract",
      "description": "Cancel a contract. Provide the contract id to do so. Only the creator of the contract can cancle the contract. If the contract is a rent contract it can only be canceled if it has no more active workloads.",
      "params": [
        {
          "name": "contract_id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfchain.BatchCancelContract",
      "description": "Cancel a list contracts. Provide a list of contract ids to do so. They can only be canceled if they were created by the entity calling this function. Rent contracts can not have active workloads in order to be canceled.",
      "params": [
        {
          "name": "contract_ids",
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfchain.GetZosVersion",
      "description": "Get the current ZOS version",
      "params": [
      ],
      "result": {
        "name": "!string",
        "schema": {
          "type": "string"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "Contract": {
        "title": "Contract",
        "properties": {
          "version": {
            "type": "integer"
          },
          "state": {
            "$ref": "#\/components\/schemas\/ContractState"
          },
          "contract_id": {
            "type": "string"
          },
          "twin_id": {
            "type": "integer"
          },
          "contract_type": {
            "$ref": "#\/components\/schemas\/ContractType"
          },
          "solution_provider_id": {
            "$ref": "#\/components\/schemas\/OptionU64"
          }
        }
      },
      "ContractState": {
        "title": "ContractState",
        "properties": {
          "is_created": {
            "type": "boolean"
          },
          "is_deleted": {
            "type": "boolean"
          },
          "is_grace_period": {
            "type": "boolean"
          },
          "as_grace_period_blocknumber": {
            "type": "string"
          }
        }
      },
      "NodeContract": {
        "title": "NodeContract",
        "properties": {
          "node": {
            "type": "integer"
          },
          "deployment_hash": {
            "type": "string"
          },
          "deployment_data": {
            "type": "string"
          },
          "public_ips": {
            "$ref": "#\/components\/schemas\/PublicIP"
          }
        }
      },
      "NameContract": {
        "title": "NameContract",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "RentContract": {
        "title": "RentContract",
        "properties": {
          "node": {
            "type": "integer"
          }
        }
      },
      "ContractType": {
        "title": "ContractType",
        "properties": {
          "is_node_contract": {
            "type": "boolean"
          },
          "node_contract": {
            "$ref": "#\/components\/schemas\/NodeContract"
          },
          "is_name_contract": {
            "type": "boolean"
          },
          "name_contract": {
            "$ref": "#\/components\/schemas\/NameContract"
          },
          "is_rent_contract": {
            "type": "boolean"
          },
          "rent_contract": {
            "$ref": "#\/components\/schemas\/RentContract"
          }
        }
      },
      "Farm": {
        "title": "Farm",
        "description": "Farm type",
        "properties": {
          "version": {
            "type": "integer"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "twin_id": {
            "type": "integer"
          },
          "pricing_policy_id": {
            "type": "integer"
          },
          "certification_type": {
            "$ref": "#\/components\/schemas\/OptionCertificationType"
          },
          "public_ips": {
            "$ref": "#\/components\/schemas\/PublicIP"
          },
          "dedicated_farm": {
            "type": "boolean"
          },
          "farming_policies_limit": {
            "$ref": "#\/components\/schemas\/OptionFarmingPoliciesLimit"
          }
        }
      },
      "OptionCertificationType": {
        "title": "OptionCertificationType",
        "properties": {
          "is_not_certified": {
            "type": "boolean"
          },
          "is_gold": {
            "type": "boolean"
          }
        }
      },
      "OptionFarmingPoliciesLimit": {
        "title": "OptionFarmingPoliciesLimit",
        "properties": {
          "has_value": {
            "type": "boolean"
          },
          "as_value": {
            "$ref": "#\/components\/schemas\/FarmingPoliciesLimit"
          }
        }
      },
      "PublicIP": {
        "title": "PublicIP",
        "properties": {
          "ip": {
            "type": "string"
          },
          "gateway": {
            "type": "string"
          },
          "contract_id": {
            "type": "string"
          }
        }
      },
      "FarmingPoliciesLimit": {
        "title": "FarmingPoliciesLimit",
        "properties": {
          "farming_policy_id": {
            "type": "integer"
          },
          "cu": {
            "$ref": "#\/components\/schemas\/OptionU64"
          },
          "su": {
            "$ref": "#\/components\/schemas\/OptionU64"
          },
          "end": {
            "$ref": "#\/components\/schemas\/OptionU64"
          },
          "node_count": {
            "$ref": "#\/components\/schemas\/OptionU32"
          },
          "node_certification": {
            "type": "boolean"
          }
        }
      },
      "OptionU32": {
        "title": "OptionU32",
        "properties": {
          "has_value": {
            "type": "boolean"
          },
          "as_value": {
            "type": "integer"
          }
        }
      },
      "OptionU64": {
        "title": "OptionU64",
        "properties": {
          "has_value": {
            "type": "boolean"
          },
          "as_value": {
            "type": "string"
          }
        }
      },
      "Node": {
        "title": "Node",
        "properties": {
          "version": {
            "type": "integer"
          },
          "id": {
            "type": "integer"
          },
          "farm_id": {
            "type": "integer"
          },
          "twin_id": {
            "type": "integer"
          },
          "resources": {
            "$ref": "#\/components\/schemas\/Resources"
          },
          "location": {
            "$ref": "#\/components\/schemas\/Location"
          },
          "public_config": {
            "$ref": "#\/components\/schemas\/OptionPublicConfig"
          },
          "created": {
            "type": "string"
          },
          "farming_policy": {
            "type": "integer"
          },
          "interfaces": {
            "$ref": "#\/components\/schemas\/Interface"
          },
          "secure_boot": {
            "type": "boolean"
          },
          "vertualized": {
            "type": "boolean"
          },
          "board_serial": {
            "$ref": "#\/components\/schemas\/OptionBoardSerial"
          },
          "connection_price": {
            "type": "integer"
          }
        }
      },
      "OptionBoardSerial": {
        "title": "OptionBoardSerial",
        "properties": {
          "has_value": {
            "type": "boolean"
          },
          "as_value": {
            "type": "string"
          }
        }
      },
      "Resources": {
        "title": "Resources",
        "properties": {
          "hru": {
            "type": "string"
          },
          "sru": {
            "type": "string"
          },
          "cru": {
            "type": "string"
          },
          "mru": {
            "type": "string"
          }
        }
      },
      "Location": {
        "title": "Location",
        "properties": {
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "latitude": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          }
        }
      },
      "OptionPublicConfig": {
        "title": "OptionPublicConfig",
        "properties": {
          "has_value": {
            "type": "boolean"
          },
          "as_value": {
            "$ref": "#\/components\/schemas\/PublicConfig"
          }
        }
      },
      "PublicConfig": {
        "title": "PublicConfig",
        "properties": {
          "ip4": {
            "$ref": "#\/components\/schemas\/IP"
          }
        }
      },
      "IP": {
        "title": "IP",
        "properties": {
          "ip": {
            "type": "string"
          },
          "gw": {
            "type": "string"
          }
        }
      },
      "Interface": {
        "title": "Interface",
        "properties": {
          "name": {
            "type": "string"
          },
          "mac": {
            "type": "string"
          },
          "ips": {
            "type": "array"
          }
        }
      },
      "Twin": {
        "title": "Twin",
        "properties": {
          "id": {
            "type": "integer"
          },
          "account_id": {
            "type": "string"
          },
          "entities": {
            "$ref": "#\/components\/schemas\/EntityProof"
          }
        }
      },
      "EntityProof": {
        "title": "EntityProof",
        "properties": {
          "entity_id": {
            "type": "integer"
          },
          "signature": {
            "type": "string"
          }
        }
      },
      "Load": {
        "title": "Load",
        "properties": {
          "network": {
            "$ref": "#\/components\/schemas\/Network"
          },
          "mnemonic": {
            "type": "string"
          }
        }
      },
      "Transfer": {
        "title": "Transfer",
        "properties": {
          "amount": {
            "type": "string"
          },
          "destination": {
            "type": "string"
          }
        }
      },
      "CreateTwin": {
        "title": "CreateTwin",
        "properties": {
          "relay": {
            "type": "string"
          },
          "pk": {
            "type": "string"
          }
        }
      },
      "AcceptTermsAndConditions": {
        "title": "AcceptTermsAndConditions",
        "properties": {
          "link": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          }
        }
      },
      "GetContractWithHash": {
        "title": "GetContractWithHash",
        "properties": {
          "node_id": {
            "type": "integer"
          },
          "hash": {
            "type": "string"
          }
        }
      },
      "CreateNodeContract": {
        "title": "CreateNodeContract",
        "properties": {
          "node_id": {
            "type": "integer"
          },
          "body": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "public_ips": {
            "type": "integer"
          },
          "solution_provider_id": {
            "type": "string"
          }
        }
      },
      "CreateRentContract": {
        "title": "CreateRentContract",
        "properties": {
          "node_id": {
            "type": "integer"
          },
          "solution_provider_id": {
            "type": "string"
          }
        }
      },
      "ServiceContractCreate": {
        "title": "ServiceContractCreate",
        "properties": {
          "service": {
            "type": "string"
          },
          "consumer": {
            "type": "string"
          }
        }
      },
      "ServiceContractBill": {
        "title": "ServiceContractBill",
        "properties": {
          "contract_id": {
            "type": "string"
          },
          "variable_amount": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          }
        }
      },
      "SetServiceContractFees": {
        "title": "SetServiceContractFees",
        "properties": {
          "contract_id": {
            "type": "string"
          },
          "base_fee": {
            "type": "string"
          },
          "variable_fee": {
            "type": "string"
          }
        }
      },
      "ServiceContractSetMetadata": {
        "title": "ServiceContractSetMetadata",
        "properties": {
          "contract_id": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          }
        }
      },
      "PublicIPInput": {
        "title": "PublicIPInput",
        "properties": {
          "ip": {
            "type": "string"
          },
          "gateway": {
            "type": "string"
          }
        }
      },
      "CreateFarm": {
        "title": "CreateFarm",
        "properties": {
          "name": {
            "type": "string"
          },
          "public_ips": {
            "$ref": "#\/components\/schemas\/PublicIPInput"
          }
        }
      }
    }
  }
}