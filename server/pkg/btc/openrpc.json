{
  "openrpc": "1.0.0",
  "info": {
    "title": "btc JSON-RPC API",
    "version": "1.0.0"
  },
  "methods": [
    {
      "name": "btc.Load",
      "description": "Connects to the bitcoin node. This should be the first call to execute.",
      "params": [
        {
          "name": "params",
          "schema": {
            "$ref": "#\/components\/schemas\/Load"
          }
        }
      ],
      "result": {
        "name": "!string",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "btc.ImportAddress",
      "description": "Imports the passed public address.",
      "params": [
        {
          "name": "address",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "btc.ImportAddressRescan",
      "description": "Imports the passed public address. When rescan is true, the block history is scanned for transactions addressed to provided address.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/ImportAddressRescan"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "btc.ImportPrivKey",
      "description": "Imports the passed private key which must be the wallet import format (WIF). The WIF string must be a base58-encoded string.",
      "params": [
        {
          "name": "wif",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "btc.ImportPrivKeyLabel",
      "description": "Imports the passed private key which must be the wallet import format (WIF). It sets the account label to the one provided. The WIF string must be a base58-encoded string.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/ImportPrivKeyLabel"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "btc.ImportPrivKeyRescan",
      "description": "Imports the passed private key which must be the wallet import format (WIF). It sets the account label to the one provided. When rescan is true, the block history is scanned for transactions addressed to provided privKey. The WIF string must be a base58-encoded string.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/ImportPrivKeyRescan"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "btc.ImportPubKey",
      "description": "Imports the passed public key.",
      "params": [
        {
          "name": "pub_key",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "btc.ImportPubKeyRescan",
      "description": "Imports the passed public key. When rescan is true, the block history is scanned for transactions addressed to provided pubkey.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/ImportPubKeyRescan"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "btc.RenameAccount",
      "description": "Allows you to rename an account.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/RenameAccount"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "btc.SendToAddress",
      "description": "Sends the passed amount to the given address with a comment if provided and returns the hash of the transaction",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/SendToAddress"
          }
        }
      ],
      "result": {
        "name": "the hash of the transaction",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "btc.EstimateSmartFee",
      "description": "Provides a more accurate estimated fee given an estimation mode.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/EstimateSmartFee"
          }
        }
      ],
      "result": {
        "name": "EstimateSmartFeeResult",
        "schema": {
          "$ref": "#\/components\/schemas\/EstimateSmartFeeResult"
        }
      }
    },
    {
      "name": "btc.GenerateBlocks",
      "description": "Generates the provided amount of blocks and returns their hashes.",
      "params": [
        {
          "name": "num_blocks",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "result": {
        "name": "their hashes",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "btc.GenerateBlocksToAddress",
      "description": "Generates numBlocks blocks to the given address and returns their hashes.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/GenerateToAddress"
          }
        }
      ],
      "result": {
        "name": "their hashes",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "btc.GetAccount",
      "description": "Returns the account associated with the passed address. The address should be the string encoded version of a valid address.",
      "params": [
        {
          "name": "address",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!string",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "btc.GetAccountAddress",
      "description": "Returns the current Bitcoin address for receiving payments to the specified account.",
      "params": [
        {
          "name": "account",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!string",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "btc.GetAddressInfo",
      "description": "Returns information about the given bitcoin address.",
      "params": [
        {
          "name": "address",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "GetAddressInfoResult",
        "schema": {
          "$ref": "#\/components\/schemas\/GetAddressInfoResult"
        }
      }
    },
    {
      "name": "btc.GetAddressesByAccount",
      "description": "Returns the list of addresses associated with the provided account. The returned list will be the string encoded versions of the addresses.",
      "params": [
        {
          "name": "account",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "![]string",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "btc.GetBalance",
      "description": "Returns the available balance for the specified account using the default number of minimum confirmations. You can provide * as an account to get the balance of all accounts.",
      "params": [
        {
          "name": "account",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!i64",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "btc.GetBlockCount",
      "description": "Returns the number of blocks in the longest block chain.",
      "params": [
      ],
      "result": {
        "name": "!i64",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "btc.GetBlockHash",
      "description": "Returns the hash of the block in the best block chain at the given height.",
      "params": [
        {
          "name": "block_height",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!string",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "btc.GetBlockStats",
      "description": "Returns block statistics given the hash of that block.",
      "params": [
        {
          "name": "hash",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "GetBlockStatsResult",
        "schema": {
          "$ref": "#\/components\/schemas\/GetBlockStatsResult"
        }
      }
    },
    {
      "name": "btc.GetBlockVerboseTx",
      "description": "Returns information about a block and its transactions given the hash of that block.",
      "params": [
        {
          "name": "hash",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "GetBlockVerboseTxResult",
        "schema": {
          "$ref": "#\/components\/schemas\/GetBlockVerboseTxResult"
        }
      }
    },
    {
      "name": "btc.GetChainTxStats",
      "description": "Returns statistics about the total number and rate of transactions in the chain. Providing the arguments will reduce the amount of blocks to calculate the statistics on.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/GetChainTxStats"
          }
        }
      ],
      "result": {
        "name": "GetChainTxStatsResult",
        "schema": {
          "$ref": "#\/components\/schemas\/GetChainTxStatsResult"
        }
      }
    },
    {
      "name": "btc.GetDifficulty",
      "description": "Returns the proof-of-work difficulty as a multiple of the minimum difficulty.",
      "params": [
      ],
      "result": {
        "name": "!f64",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "btc.GetMiningInfo",
      "description": "Returns mining information.",
      "params": [
      ],
      "result": {
        "name": "GetMiningInfoResult",
        "schema": {
          "$ref": "#\/components\/schemas\/GetMiningInfoResult"
        }
      }
    },
    {
      "name": "btc.GetNewAddress",
      "description": "Returns a new address. The returned string will be the encoded address (format will be based on the chain's parameters).",
      "params": [
        {
          "name": "account",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!string",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "btc.GetNodeAddresses",
      "description": "Returns data about known node addresses.",
      "params": [
      ],
      "result": {
        "name": "GetNodeAddressesResult",
        "schema": {
          "$ref": "#\/components\/schemas\/GetNodeAddressesResult"
        }
      }
    },
    {
      "name": "btc.GetPeerInfo",
      "description": "Returns data about each connected network peer.",
      "params": [
      ],
      "result": {
        "name": "GetPeerInfoResult",
        "schema": {
          "$ref": "#\/components\/schemas\/GetPeerInfoResult"
        }
      }
    },
    {
      "name": "btc.GetRawTransaction",
      "description": "Returns a transaction given its hash.",
      "params": [
        {
          "name": "tx_hash",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Transaction",
        "schema": {
          "$ref": "#\/components\/schemas\/Transaction"
        }
      }
    },
    {
      "name": "btc.CreateWallet",
      "description": "Creates a new wallet account taken into account the provided arguments.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/CreateWallet"
          }
        }
      ],
      "result": {
        "name": "CreateWalletResult",
        "schema": {
          "$ref": "#\/components\/schemas\/CreateWalletResult"
        }
      }
    },
    {
      "name": "btc.Move",
      "description": "Moves specified amount from one account in your wallet to another. Only funds with the default number of minimum confirmations will be used. A comment can also be added to the transaction.",
      "params": [
        {
          "name": "args",
          "schema": {
            "$ref": "#\/components\/schemas\/Move"
          }
        }
      ],
      "result": {
        "name": "!bool",
        "schema": {
          "type": "boolean"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "Load": {
        "title": "Load",
        "description": "configurations to load bitcoin client",
        "properties": {
          "host": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "pass": {
            "type": "string"
          }
        }
      },
      "ImportAddressRescan": {
        "title": "ImportAddressRescan",
        "description": "args to import bitcoin address",
        "properties": {
          "address": {
            "type": "string"
          },
          "account": {
            "type": "string"
          },
          "rescan": {
            "type": "boolean"
          }
        }
      },
      "ImportPrivKeyLabel": {
        "title": "ImportPrivKeyLabel",
        "properties": {
          "wif": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "ImportPrivKeyRescan": {
        "title": "ImportPrivKeyRescan",
        "properties": {
          "wif": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "rescan": {
            "type": "boolean"
          }
        }
      },
      "ImportPubKeyRescan": {
        "title": "ImportPubKeyRescan",
        "properties": {
          "pub_key": {
            "type": "string"
          },
          "rescan": {
            "type": "boolean"
          }
        }
      },
      "RenameAccount": {
        "title": "RenameAccount",
        "properties": {
          "old_account": {
            "type": "string"
          },
          "new_account": {
            "type": "string"
          }
        }
      },
      "SendToAddress": {
        "title": "SendToAddress",
        "description": "send amount of token to address, with\/without comment",
        "properties": {
          "address": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "comment": {
            "description": "is intended to be used for the purpose of the transaction, keep empty if you don't wat to provide any comment.",
            "type": "string"
          },
          "comment_to": {
            "description": "is intended to be used for who the transaction is being sent to.",
            "type": "string"
          }
        }
      },
      "EstimateSmartFee": {
        "title": "EstimateSmartFee",
        "properties": {
          "conf_target": {
            "description": "confirmation target in blocks",
            "type": "string"
          },
          "mode": {
            "description": "defines the different fee estimation modes, should be one of UNSET, ECONOMICAL or CONSERVATIVE",
            "type": "string"
          }
        }
      },
      "GenerateToAddress": {
        "title": "GenerateToAddress",
        "properties": {
          "num_blocks": {
            "description": "the amount of blocks to generate",
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "max_tries": {
            "description": "the maximum amount of times to try again when generating fails",
            "type": "string"
          }
        }
      },
      "GetChainTxStats": {
        "title": "GetChainTxStats",
        "properties": {
          "amount_of_blocks": {
            "description": "provide statistics for amount_of_blocks blocks, if 0 for all blocks",
            "type": "integer"
          },
          "block_hash_end": {
            "description": "provide statistics for amount_of_blocks blocks up until the block with the hash provided in block_hash_end",
            "type": "string"
          }
        }
      },
      "CreateWallet": {
        "title": "CreateWallet",
        "properties": {
          "name": {
            "type": "string"
          },
          "disable_private_keys": {
            "type": "boolean"
          },
          "create_blank_wallet": {
            "type": "boolean"
          },
          "passphrase": {
            "type": "string"
          },
          "avoid_reuse": {
            "type": "boolean"
          }
        }
      },
      "Move": {
        "title": "Move",
        "properties": {
          "from_account": {
            "type": "string"
          },
          "to_account": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "min_confirmations": {
            "type": "integer"
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "EstimateSmartFeeResult": {
        "title": "EstimateSmartFeeResult",
        "properties": {
          "feerate": {
            "type": "string"
          },
          "errors": {
            "type": "array"
          },
          "blocks": {
            "type": "string"
          }
        }
      },
      "GetAddressInfoResult": {
        "title": "GetAddressInfoResult",
        "properties": {
          "ismine": {
            "type": "boolean"
          },
          "iswatchonly": {
            "type": "boolean"
          },
          "timestamp": {
            "type": "integer"
          },
          "hdkeypath": {
            "type": "string"
          },
          "hdseedid": {
            "type": "string"
          },
          "embedded": {
            "$ref": "#\/components\/schemas\/EmbeddedAddressInfo"
          }
        }
      },
      "EmbeddedAddressInfo": {
        "title": "EmbeddedAddressInfo",
        "properties": {
          "address": {
            "type": "string"
          },
          "script_pub_key": {
            "type": "string"
          },
          "solvable": {
            "type": "boolean"
          },
          "desc": {
            "type": "string"
          },
          "isscript": {
            "type": "boolean"
          },
          "ischange": {
            "type": "boolean"
          },
          "iswitness": {
            "type": "boolean"
          },
          "witness_version": {
            "type": "integer"
          },
          "witness_program": {
            "type": "string"
          },
          "script": {
            "type": "string"
          },
          "hex": {
            "type": "string"
          },
          "pubkeys": {
            "type": "array"
          },
          "sigsrequired": {
            "type": "integer"
          },
          "pubkey": {
            "type": "string"
          },
          "iscompressed": {
            "type": "boolean"
          },
          "hdmasterfingerprint": {
            "type": "string"
          },
          "labels": {
            "type": "array"
          }
        }
      },
      "GetBlockStatsResult": {
        "title": "GetBlockStatsResult",
        "properties": {
          "avgfee": {
            "type": "string"
          },
          "avgfeerate": {
            "type": "string"
          },
          "avgtxsize": {
            "type": "string"
          },
          "feerate_percentiles": {
            "type": "array"
          },
          "blockhash": {
            "type": "string"
          },
          "height": {
            "type": "string"
          },
          "ins": {
            "type": "string"
          },
          "maxfee": {
            "type": "string"
          },
          "maxfeerate": {
            "type": "string"
          },
          "maxtxsize": {
            "type": "string"
          },
          "medianfee": {
            "type": "string"
          },
          "mediantime": {
            "type": "string"
          },
          "mediantxsize": {
            "type": "string"
          },
          "minfee": {
            "type": "string"
          },
          "minfeerate": {
            "type": "string"
          },
          "mintxsize": {
            "type": "string"
          },
          "outs": {
            "type": "string"
          },
          "swtotal_size": {
            "type": "string"
          },
          "swtotal_weight": {
            "type": "string"
          },
          "swtxs": {
            "type": "string"
          },
          "subsidy": {
            "type": "string"
          },
          "time": {
            "type": "string"
          },
          "total_out": {
            "type": "string"
          },
          "total_size": {
            "type": "string"
          },
          "total_weight": {
            "type": "string"
          },
          "txs": {
            "type": "string"
          },
          "utxo_increase": {
            "type": "string"
          },
          "utxo_size_inc": {
            "type": "string"
          }
        }
      },
      "GetBlockVerboseTxResult": {
        "title": "GetBlockVerboseTxResult",
        "description": "GetBlockVerboseTxResult models the data from the getblock command when the",
        "properties": {
          "hash": {
            "type": "string"
          },
          "confirmations": {
            "type": "string"
          },
          "strippedsize": {
            "type": "integer"
          },
          "size": {
            "type": "integer"
          },
          "weight": {
            "type": "integer"
          },
          "height": {
            "type": "string"
          },
          "version": {
            "type": "integer"
          },
          "version_hex": {
            "type": "string"
          },
          "merkleroot": {
            "type": "string"
          },
          "tx": {
            "$ref": "#\/components\/schemas\/TxRawResult"
          },
          "rawtx": {
            "$ref": "#\/components\/schemas\/TxRawResult"
          },
          "time": {
            "type": "string"
          },
          "nonce": {
            "type": "integer"
          },
          "bits": {
            "type": "string"
          },
          "difficulty": {
            "type": "string"
          },
          "previousblockhash": {
            "type": "string"
          },
          "nextblockhash": {
            "type": "string"
          }
        }
      },
      "TxRawResult": {
        "title": "TxRawResult",
        "description": "TxRawResult models the data from the getrawtransaction command.",
        "properties": {
          "hex": {
            "type": "string"
          },
          "txid": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "vsize": {
            "type": "integer"
          },
          "weight": {
            "type": "integer"
          },
          "version": {
            "type": "integer"
          },
          "locktime": {
            "type": "integer"
          },
          "vin": {
            "$ref": "#\/components\/schemas\/Vin"
          },
          "vout": {
            "$ref": "#\/components\/schemas\/Vout"
          },
          "blockhash": {
            "type": "string"
          },
          "confirmations": {
            "type": "string"
          },
          "time": {
            "type": "string"
          },
          "blocktime": {
            "type": "string"
          }
        }
      },
      "Vin": {
        "title": "Vin",
        "properties": {
          "coinbase": {
            "type": "string"
          },
          "txid": {
            "type": "string"
          },
          "vout": {
            "type": "integer"
          },
          "script_sig": {
            "$ref": "#\/components\/schemas\/ScriptSig"
          },
          "sequence": {
            "type": "integer"
          },
          "txinwitness": {
            "type": "array"
          }
        }
      },
      "ScriptSig": {
        "title": "ScriptSig",
        "properties": {
          "asm_": {
            "type": "string"
          },
          "hex": {
            "type": "string"
          }
        }
      },
      "Vout": {
        "title": "Vout",
        "properties": {
          "value": {
            "type": "string"
          },
          "n": {
            "type": "integer"
          },
          "script_pub_key": {
            "$ref": "#\/components\/schemas\/ScriptPubKeyResult"
          }
        }
      },
      "ScriptPubKeyResult": {
        "title": "ScriptPubKeyResult",
        "properties": {
          "asm_": {
            "type": "string"
          },
          "hex": {
            "type": "string"
          },
          "req_sigs": {
            "type": "integer"
          },
          "type_": {
            "type": "string"
          },
          "addresses": {
            "type": "array"
          }
        }
      },
      "GetChainTxStatsResult": {
        "title": "GetChainTxStatsResult",
        "description": "GetChainTxStatsResult models the data from the getchaintxstats command.",
        "properties": {
          "time": {
            "type": "string"
          },
          "txcount": {
            "type": "string"
          },
          "window_final_block_hash": {
            "type": "string"
          },
          "window_final_block_height": {
            "type": "integer"
          },
          "window_block_count": {
            "type": "integer"
          },
          "window_tx_count": {
            "type": "integer"
          },
          "window_interval": {
            "type": "integer"
          },
          "txrate": {
            "type": "string"
          }
        }
      },
      "GetMiningInfoResult": {
        "title": "GetMiningInfoResult",
        "description": "GetMiningInfoResult models the data from the getmininginfo command.",
        "properties": {
          "blocks": {
            "type": "string"
          },
          "currentblocksize": {
            "type": "string"
          },
          "currentblockweight": {
            "type": "string"
          },
          "currentblocktx": {
            "type": "string"
          },
          "difficulty": {
            "type": "string"
          },
          "errors": {
            "type": "string"
          },
          "generate": {
            "type": "boolean"
          },
          "genproclimit": {
            "type": "integer"
          },
          "hashespersec": {
            "type": "string"
          },
          "networkhashps": {
            "type": "string"
          },
          "pooledtx": {
            "type": "string"
          },
          "testnet": {
            "type": "boolean"
          }
        }
      },
      "GetNodeAddressesResult": {
        "title": "GetNodeAddressesResult",
        "description": "GetNodeAddressesResult models the data returned from the getnodeaddresses command.",
        "properties": {
          "time": {
            "description": "Timestamp in seconds since epoch (Jan 1 1970 GMT) keeping track of when the node was last seen",
            "type": "string"
          },
          "services": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          }
        }
      },
      "GetPeerInfoResult": {
        "title": "GetPeerInfoResult",
        "description": "GetPeerInfoResult models the data returned from the getpeerinfo command.",
        "properties": {
          "id": {
            "type": "integer"
          },
          "addr": {
            "type": "string"
          },
          "addrlocal": {
            "type": "string"
          },
          "services": {
            "type": "string"
          },
          "relaytxes": {
            "type": "boolean"
          },
          "lastsend": {
            "type": "string"
          },
          "lastrecv": {
            "type": "string"
          },
          "bytessent": {
            "type": "string"
          },
          "bytesrecv": {
            "type": "string"
          },
          "conntime": {
            "type": "string"
          },
          "timeoffset": {
            "type": "string"
          },
          "pingtime": {
            "type": "string"
          },
          "pingwait": {
            "type": "string"
          },
          "version": {
            "type": "integer"
          },
          "subver": {
            "type": "string"
          },
          "inbound": {
            "type": "boolean"
          },
          "startingheight": {
            "type": "integer"
          },
          "currentheight": {
            "type": "integer"
          },
          "banscore": {
            "type": "integer"
          },
          "feefilter": {
            "type": "string"
          },
          "syncnode": {
            "type": "boolean"
          }
        }
      },
      "Transaction": {
        "title": "Transaction",
        "properties": {
          "msg_tx": {
            "$ref": "#\/components\/schemas\/MsgTx"
          },
          "tx_hash": {
            "description": "Cached transaction hash",
            "type": "string"
          },
          "tx_hash_witness": {
            "description": "Cached transaction witness hash",
            "type": "string"
          },
          "tx_has_witness": {
            "description": "If the transaction has witness data",
            "type": "boolean"
          },
          "tx_index": {
            "description": "Position within a block or TxIndexUnknown",
            "type": "integer"
          }
        }
      },
      "MsgTx": {
        "title": "MsgTx",
        "properties": {
          "version": {
            "type": "integer"
          },
          "tx_in": {
            "$ref": "#\/components\/schemas\/TxIn"
          },
          "tx_out": {
            "$ref": "#\/components\/schemas\/TxOut"
          },
          "lock_time": {
            "type": "integer"
          }
        }
      },
      "TxIn": {
        "title": "TxIn",
        "properties": {
          "previous_out_point": {
            "$ref": "#\/components\/schemas\/OutPoint"
          },
          "signature_script": {
            "type": "string"
          },
          "witness": {
            "type": "string"
          },
          "sequence": {
            "type": "integer"
          }
        }
      },
      "OutPoint": {
        "title": "OutPoint",
        "properties": {
          "hash": {
            "type": "string"
          },
          "index": {
            "type": "integer"
          }
        }
      },
      "TxOut": {
        "title": "TxOut",
        "properties": {
          "value": {
            "type": "string"
          },
          "pk_script": {
            "type": "string"
          }
        }
      },
      "CreateWalletResult": {
        "title": "CreateWalletResult",
        "description": "CreateWalletResult models the result of the createwallet command.",
        "properties": {
          "name": {
            "type": "string"
          },
          "warning": {
            "type": "string"
          }
        }
      }
    }
  }
}