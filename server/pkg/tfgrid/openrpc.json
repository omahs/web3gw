{
  "openrpc": "1.0.0",
  "info": {
    "title": "tfgrid JSON-RPC API",
    "version": "1.0.0"
  },
  "methods": [
    {
      "name": "tfgrid.FilterNodes",
      "description": "This call can be used to filter nodes on specific options such as the available memory, cores, etc. It",
      "params": [
        {
          "name": "filters",
          "schema": {
            "$ref": "#\/components\/schemas\/FilterOptions"
          }
        }
      ],
      "result": {
        "name": "list of available nodes (their id)",
        "schema": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    {
      "name": "tfgrid.GatewaysDeployFqdn",
      "description": "Deploys a fully qualified domain on gateway (for example site.com) and returns gateway model with some extra data related to the created fqdn.",
      "params": [
        {
          "name": "model",
          "schema": {
            "$ref": "#\/components\/schemas\/GatewayFQDN"
          }
        }
      ],
      "result": {
        "name": "gateway model\u0001 with some extra data related to the created fqdn",
        "schema": {
          "$ref": "#\/components\/schemas\/GatewayFQDNResult"
        }
      }
    },
    {
      "name": "tfgrid.GatewaysGetFqdn",
      "description": "Gets the fqdn info using the name given when created. It returns an object containing the fully qualified domain on gateway information.",
      "params": [
        {
          "name": "model_name",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "an object containing the\u0001 fully qualified domain on gateway information",
        "schema": {
          "$ref": "#\/components\/schemas\/GatewayFQDNResult"
        }
      }
    },
    {
      "name": "tfgrid.GatewaysDeleteFqdn",
      "description": "Deletes the fully qualified domain on gateway given the name used to create it. An error is returned if the attempt failed.",
      "params": [
        {
          "name": "model_name",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfgrid.GatewaysDeployName",
      "description": "Deploys a gateway name given the configuration and returns an object containing the gateway name configuration.",
      "params": [
        {
          "name": "model",
          "schema": {
            "$ref": "#\/components\/schemas\/GatewayName"
          }
        }
      ],
      "result": {
        "name": "an object containing the\u0001 gateway name configuration",
        "schema": {
          "$ref": "#\/components\/schemas\/GatewayNameResult"
        }
      }
    },
    {
      "name": "tfgrid.GatewaysGetName",
      "description": "Gets the gateway name object given the name used when deploying.",
      "params": [
        {
          "name": "model_name",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "GatewayNameResult",
        "schema": {
          "$ref": "#\/components\/schemas\/GatewayNameResult"
        }
      }
    },
    {
      "name": "tfgrid.GatewaysDeleteName",
      "description": "Deletes the gateway name given the name used when deploying. This call will return an error if it fails to do so.",
      "params": [
        {
          "name": "model_name",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfgrid.K8sDeploy",
      "description": "Deploys a kubernetes cluster given the cluster configuration. The cluster object is returned with extra data if the call succeeds.",
      "params": [
        {
          "name": "cluster",
          "schema": {
            "$ref": "#\/components\/schemas\/K8sCluster"
          }
        }
      ],
      "result": {
        "name": "K8sClusterResult",
        "schema": {
          "$ref": "#\/components\/schemas\/K8sClusterResult"
        }
      }
    },
    {
      "name": "tfgrid.K8sGet",
      "description": "Gets a deployed kubernetes cluster data given its name. Returns an error if no cluster can be found with the provided name.",
      "params": [
        {
          "name": "cluster_name",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "K8sClusterResult",
        "schema": {
          "$ref": "#\/components\/schemas\/K8sClusterResult"
        }
      }
    },
    {
      "name": "tfgrid.K8sDelete",
      "description": "Deletes a deployed kubernetes cluster given a name. The call returns an error if it fails to do so.",
      "params": [
        {
          "name": "cluster_name",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "an error if it fails to do so",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfgrid.Load",
      "description": "Loads the mnemonic into the session for a specific network. The call returns an error if the mnemonic or the network is invalid.",
      "params": [
        {
          "name": "credentials",
          "schema": {
            "$ref": "#\/components\/schemas\/Credentials"
          }
        }
      ],
      "result": {
        "name": "an error if the mnemonic or the\u0001 network is invalid",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfgrid.MachinesDeploy",
      "description": "Deploys a machines workload given a machines model. If it does not succeed the call returns an error.",
      "params": [
        {
          "name": "model",
          "schema": {
            "$ref": "#\/components\/schemas\/MachinesModel"
          }
        }
      ],
      "result": {
        "name": "an error",
        "schema": {
          "$ref": "#\/components\/schemas\/MachinesResult"
        }
      }
    },
    {
      "name": "tfgrid.MachinesGet",
      "description": "Gets the information about a machines deployment using the deployment name",
      "params": [
        {
          "name": "model_name",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "MachinesResult",
        "schema": {
          "$ref": "#\/components\/schemas\/MachinesResult"
        }
      }
    },
    {
      "name": "tfgrid.MachinesDelete",
      "description": "Deletes a deployed machines given the name used when deploying.",
      "params": [
        {
          "name": "model_name",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfgrid.ZdbDeploy",
      "description": "Deploys a zdb workload on the grid given a model. This call returns the zdb model with extra computed data from the grid upon success.",
      "params": [
        {
          "name": "model",
          "schema": {
            "$ref": "#\/components\/schemas\/ZDB"
          }
        }
      ],
      "result": {
        "name": "the zdb model with extra computed\u0001 data from the grid upon success",
        "schema": {
          "$ref": "#\/components\/schemas\/ZDBResult"
        }
      }
    },
    {
      "name": "tfgrid.ZdbDelete",
      "description": "Deletes a deployed zdb workload given its name. Returns an error if it does not succeed.",
      "params": [
        {
          "name": "model_name",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfgrid.ZdbGet",
      "description": "Gets a deployed zdb deployment info given its configuration name. Returns the zdb deployment data upon success.",
      "params": [
        {
          "name": "model_name",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "ZDBResult",
        "schema": {
          "$ref": "#\/components\/schemas\/ZDBResult"
        }
      }
    },
    {
      "name": "tfgrid.ZosDeploymentDeploy",
      "description": "Deploys a deployment on a ZOS node and returns a string containing system hypervisor info.",
      "params": [
        {
          "name": "request",
          "schema": {
            "$ref": "#\/components\/schemas\/ZOSNodeRequest"
          }
        }
      ],
      "result": {
        "name": "a string containing system hypervisor info",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfgrid.ZosSystemVersion",
      "description": "Returns the system version of the ZOS node.",
      "params": [
        {
          "name": "request",
          "schema": {
            "$ref": "#\/components\/schemas\/ZOSNodeRequest"
          }
        }
      ],
      "result": {
        "name": "SystemVersion",
        "schema": {
          "$ref": "#\/components\/schemas\/SystemVersion"
        }
      }
    },
    {
      "name": "tfgrid.ZosSystemHypervisor",
      "description": "Returns system hypervisor info of the ZOS node.",
      "params": [
        {
          "name": "request",
          "schema": {
            "$ref": "#\/components\/schemas\/ZOSNodeRequest"
          }
        }
      ],
      "result": {
        "name": "!string",
        "schema": {
          "type": "string"
        }
      }
    },
    {
      "name": "tfgrid.ZosSystemDmi",
      "description": "Checks system DMI information for the selected ZOS node.",
      "params": [
        {
          "name": "request",
          "schema": {
            "$ref": "#\/components\/schemas\/ZOSNodeRequest"
          }
        }
      ],
      "result": {
        "name": "DMI",
        "schema": {
          "$ref": "#\/components\/schemas\/DMI"
        }
      }
    },
    {
      "name": "tfgrid.ZosNetworkPublicConfig",
      "description": "Gets the public configuration of the specified ZOS node.",
      "params": [
        {
          "name": "request",
          "schema": {
            "$ref": "#\/components\/schemas\/ZOSNodeRequest"
          }
        }
      ],
      "result": {
        "name": "PublicConfig",
        "schema": {
          "$ref": "#\/components\/schemas\/PublicConfig"
        }
      }
    },
    {
      "name": "tfgrid.ZosNetworkInterfaces",
      "description": "Returns all network interfaces of the selected ZOS node. It returns a map from interface name to its IPs.",
      "params": [
        {
          "name": "request",
          "schema": {
            "$ref": "#\/components\/schemas\/ZOSNodeRequest"
          }
        }
      ],
      "result": {
        "name": "a map from interface name\u0001 to its IPs",
        "schema": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "name": "tfgrid.ZosNetworkListWgPorts",
      "description": "Returns a list of all the ports that are taken on the selected ZOS node.",
      "params": [
        {
          "name": "request",
          "schema": {
            "$ref": "#\/components\/schemas\/ZOSNodeRequest"
          }
        }
      ],
      "result": {
        "name": "![]u16",
        "schema": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    {
      "name": "tfgrid.ZosNodeStatistics",
      "description": "Returns the node statistics including total and available cpu, memory, storage, etc...",
      "params": [
        {
          "name": "request",
          "schema": {
            "$ref": "#\/components\/schemas\/ZOSNodeRequest"
          }
        }
      ],
      "result": {
        "name": "Statistics",
        "schema": {
          "$ref": "#\/components\/schemas\/Statistics"
        }
      }
    },
    {
      "name": "tfgrid.ZosDeploymentChanges",
      "description": "Returns all workload changes over the lifetime of the deployment.",
      "params": [
        {
          "name": "request",
          "schema": {
            "$ref": "#\/components\/schemas\/ZOSNodeRequest"
          }
        }
      ],
      "result": {
        "name": "Workload",
        "schema": {
          "$ref": "#\/components\/schemas\/Workload"
        }
      }
    },
    {
      "name": "tfgrid.ZosDeploymentUpdate",
      "description": "Updates a deployment on a node given new deployment data.",
      "params": [
        {
          "name": "request",
          "schema": {
            "$ref": "#\/components\/schemas\/ZOSNodeRequest"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfgrid.ZosDeploymentDelete",
      "description": "Deletes a deployment on a ZOS node.",
      "params": [
        {
          "name": "request",
          "schema": {
            "$ref": "#\/components\/schemas\/ZOSNodeRequest"
          }
        }
      ],
      "result": {
        "name": "!",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "tfgrid.ZosDeploymentGet",
      "description": "Gets the deployment data of an existing deployment. This call requires the contract id.",
      "params": [
        {
          "name": "request",
          "schema": {
            "$ref": "#\/components\/schemas\/ZOSNodeRequest"
          }
        }
      ],
      "result": {
        "name": "Deployment",
        "schema": {
          "$ref": "#\/components\/schemas\/Deployment"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "FilterOptions": {
        "title": "FilterOptions",
        "properties": {
          "farm_id": {
            "description": "will try to use farmerbot if found on this farm.",
            "type": "string"
          },
          "public_config": {
            "description": "useful with filtering gateway nodes.",
            "type": "boolean"
          },
          "public_ips_count": {
            "description": "free ips for the node.",
            "type": "integer"
          },
          "dedicated": {
            "description": "if the node is dedicated or not.",
            "type": "boolean"
          },
          "mru": {
            "description": "free memory on node in MB.",
            "type": "string"
          },
          "hru": {
            "description": "free hdd storage on node in GB.",
            "type": "string"
          },
          "sru": {
            "description": "free ssd storage on node in GB.",
            "type": "string"
          }
        }
      },
      "Credentials": {
        "title": "Credentials",
        "description": "The credentials required before executing any other tfgrid rpc.",
        "properties": {
          "mnemonic": {
            "description": "secret mnemonic",
            "type": "string"
          },
          "network": {
            "description": "grid network [dev, qa, test, main]",
            "type": "string"
          }
        }
      },
      "GatewayFQDN": {
        "title": "GatewayFQDN",
        "description": "NOTE: is there any need to translate json here?",
        "properties": {
          "name": {
            "type": "string"
          },
          "node_id": {
            "type": "integer"
          },
          "tls_passthrough": {
            "type": "boolean"
          },
          "backends": {
            "type": "array"
          },
          "fqdn": {
            "type": "string"
          }
        }
      },
      "GatewayFQDNResult": {
        "title": "GatewayFQDNResult",
        "properties": {
          "name": {
            "type": "string"
          },
          "node_id": {
            "type": "integer"
          },
          "tls_passthrough": {
            "type": "boolean"
          },
          "backends": {
            "type": "array"
          },
          "fqdn": {
            "description": "computed",
            "type": "string"
          },
          "contract_id": {
            "type": "integer"
          }
        }
      },
      "GatewayName": {
        "title": "GatewayName",
        "properties": {
          "name": {
            "type": "string"
          },
          "node_id": {
            "type": "integer"
          },
          "tls_passthrough": {
            "type": "boolean"
          },
          "backends": {
            "type": "array"
          }
        }
      },
      "GatewayNameResult": {
        "title": "GatewayNameResult",
        "properties": {
          "name": {
            "type": "string"
          },
          "node_id": {
            "type": "integer"
          },
          "tls_passthrough": {
            "type": "boolean"
          },
          "backends": {
            "type": "array"
          },
          "fqdn": {
            "description": "computed",
            "type": "string"
          },
          "name_contract_id": {
            "description": "the full domain name",
            "type": "integer"
          },
          "contract_id": {
            "type": "integer"
          }
        }
      },
      "K8sCluster": {
        "title": "K8sCluster",
        "properties": {
          "name": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "ssh_key": {
            "type": "string"
          },
          "master": {
            "$ref": "#\/components\/schemas\/K8sNode"
          },
          "workers": {
            "$ref": "#\/components\/schemas\/K8sNode"
          }
        }
      },
      "K8sClusterResult": {
        "title": "K8sClusterResult",
        "properties": {
          "name": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "ssh_key": {
            "type": "string"
          },
          "master": {
            "$ref": "#\/components\/schemas\/K8sNode"
          },
          "workers": {
            "$ref": "#\/components\/schemas\/K8sNode"
          }
        }
      },
      "K8sNode": {
        "title": "K8sNode",
        "properties": {
          "name": {
            "type": "string"
          },
          "node_id": {
            "type": "integer"
          },
          "farm_id": {
            "type": "integer"
          },
          "public_ip": {
            "type": "boolean"
          },
          "public_ip6": {
            "type": "boolean"
          },
          "planetary": {
            "type": "boolean"
          },
          "flist": {
            "type": "string"
          },
          "cpu": {
            "type": "integer"
          },
          "memory": {
            "description": "number of vcpu cores.",
            "type": "integer"
          },
          "disk_size": {
            "description": "in MBs in GB, monted in \/mydisk",
            "type": "integer"
          }
        }
      },
      "K8sNodeResult": {
        "title": "K8sNodeResult",
        "properties": {
          "name": {
            "type": "string"
          },
          "node_id": {
            "type": "integer"
          },
          "farm_id": {
            "type": "integer"
          },
          "public_ip": {
            "type": "boolean"
          },
          "public_ip6": {
            "type": "boolean"
          },
          "planetary": {
            "type": "boolean"
          },
          "flist": {
            "type": "string"
          },
          "cpu": {
            "type": "integer"
          },
          "memory": {
            "type": "integer"
          },
          "disk_size": {
            "description": "computed",
            "type": "integer"
          },
          "computed_ip4": {
            "type": "string"
          },
          "computed_ip6": {
            "type": "string"
          },
          "wg_ip": {
            "type": "string"
          },
          "ygg_ip": {
            "type": "string"
          }
        }
      },
      "KeyValue": {
        "title": "KeyValue",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "MachinesModel": {
        "title": "MachinesModel",
        "properties": {
          "name": {
            "type": "string"
          },
          "network": {
            "$ref": "#\/components\/schemas\/Network"
          },
          "machines": {
            "$ref": "#\/components\/schemas\/Machine"
          },
          "metadata": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "MachinesResult": {
        "title": "MachinesResult",
        "properties": {
          "name": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "network": {
            "$ref": "#\/components\/schemas\/NetworkResult"
          },
          "machines": {
            "$ref": "#\/components\/schemas\/MachineResult"
          }
        }
      },
      "Machine": {
        "title": "Machine",
        "properties": {
          "name": {
            "type": "string"
          },
          "node_id": {
            "type": "integer"
          },
          "farm_id": {
            "type": "integer"
          },
          "flist": {
            "type": "string"
          },
          "entrypoint": {
            "type": "string"
          },
          "public_ip": {
            "type": "boolean"
          },
          "public_ip6": {
            "type": "boolean"
          },
          "planetary": {
            "type": "boolean"
          },
          "cpu": {
            "description": "number of vcpu cores",
            "type": "integer"
          },
          "memory": {
            "description": "in MBs",
            "type": "string"
          },
          "rootfs_size": {
            "description": "in MBs",
            "type": "string"
          },
          "zlogs": {
            "$ref": "#\/components\/schemas\/Zlog"
          },
          "disks": {
            "$ref": "#\/components\/schemas\/Disk"
          },
          "qsfs": {
            "$ref": "#\/components\/schemas\/QSFS"
          },
          "env_vars": {
            "description": "ex: { \"SSH_KEY\": \"..\" }",
            "type": "object"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "MachineResult": {
        "title": "MachineResult",
        "properties": {
          "name": {
            "type": "string"
          },
          "node_id": {
            "type": "integer"
          },
          "farm_id": {
            "type": "integer"
          },
          "flist": {
            "type": "string"
          },
          "entrypoint": {
            "type": "string"
          },
          "public_ip": {
            "type": "boolean"
          },
          "public_ip6": {
            "type": "boolean"
          },
          "planetary": {
            "type": "boolean"
          },
          "cpu": {
            "type": "integer"
          },
          "memory": {
            "type": "string"
          },
          "rootfs_size": {
            "type": "string"
          },
          "zlogs": {
            "$ref": "#\/components\/schemas\/Zlog"
          },
          "disks": {
            "$ref": "#\/components\/schemas\/DiskResult"
          },
          "qsfs": {
            "$ref": "#\/components\/schemas\/QSFSResult"
          },
          "env_vars": {
            "type": "object"
          },
          "description": {
            "description": "computed",
            "type": "string"
          },
          "computed_ip4": {
            "type": "string"
          },
          "computed_ip6": {
            "type": "string"
          },
          "wireguard_ip": {
            "type": "string"
          },
          "ygg_ip": {
            "type": "string"
          }
        }
      },
      "Disk": {
        "title": "Disk",
        "properties": {
          "size": {
            "type": "integer"
          },
          "mountpoint": {
            "description": "disk size in GBs",
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "DiskResult": {
        "title": "DiskResult",
        "properties": {
          "size": {
            "type": "integer"
          },
          "mountpoint": {
            "description": "disk size in GBs",
            "type": "string"
          },
          "description": {
            "description": "computed",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "QSFS": {
        "title": "QSFS",
        "properties": {
          "name": {
            "type": "string"
          },
          "mountpoint": {
            "type": "string"
          },
          "qsfs_zdbs_name": {
            "type": "string"
          },
          "encryption_key": {
            "type": "string"
          },
          "cache": {
            "type": "integer"
          },
          "minimal_shards": {
            "type": "integer"
          },
          "expected_shards": {
            "type": "integer"
          },
          "redundant_groups": {
            "type": "integer"
          },
          "redundant_nodes": {
            "type": "integer"
          },
          "encryption_algorithm": {
            "type": "string"
          },
          "compression_algorithm": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#\/components\/schemas\/Metadata"
          },
          "description": {
            "type": "string"
          },
          "max_zdb_data_dir_size": {
            "type": "integer"
          },
          "groups": {
            "$ref": "#\/components\/schemas\/Group"
          }
        }
      },
      "QSFSResult": {
        "title": "QSFSResult",
        "properties": {
          "name": {
            "type": "string"
          },
          "mountpoint": {
            "type": "string"
          },
          "qsfs_zdbs_name": {
            "type": "string"
          },
          "encryption_key": {
            "type": "string"
          },
          "cache": {
            "type": "integer"
          },
          "minimal_shards": {
            "type": "integer"
          },
          "expected_shards": {
            "type": "integer"
          },
          "redundant_groups": {
            "type": "integer"
          },
          "redundant_nodes": {
            "type": "integer"
          },
          "encryption_algorithm": {
            "type": "string"
          },
          "compression_algorithm": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#\/components\/schemas\/Metadata"
          },
          "description": {
            "type": "string"
          },
          "max_zdb_data_dir_size": {
            "type": "integer"
          },
          "groups": {
            "$ref": "#\/components\/schemas\/Group"
          },
          "metrics_endpoint": {
            "type": "string"
          }
        }
      },
      "Zlog": {
        "title": "Zlog",
        "properties": {
          "output": {
            "type": "string"
          }
        }
      },
      "Metadata": {
        "title": "Metadata",
        "properties": {
          "type_": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "encryption_algorithm": {
            "type": "string"
          },
          "encryption_key": {
            "type": "string"
          },
          "backends": {
            "$ref": "#\/components\/schemas\/Backend"
          }
        }
      },
      "Group": {
        "title": "Group",
        "properties": {
          "backends": {
            "$ref": "#\/components\/schemas\/Backend"
          }
        }
      },
      "Backend": {
        "title": "Backend",
        "properties": {
          "address": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "Network": {
        "title": "Network",
        "properties": {
          "ip_range": {
            "type": "string"
          },
          "add_wireguard_access": {
            "type": "boolean"
          }
        }
      },
      "NetworkResult": {
        "title": "NetworkResult",
        "properties": {
          "name": {
            "type": "string"
          },
          "ip_range": {
            "description": "computed",
            "type": "string"
          },
          "wireguard_config": {
            "type": "string"
          }
        }
      },
      "MachinesGet": {
        "title": "MachinesGet",
        "description": "struct AddMachine { machine Machine project_name string } struct RemoveMachine { machine_name string project_name string }",
        "properties": {
          "model_name": {
            "type": "string"
          },
          "project_name": {
            "type": "string"
          }
        }
      },
      "MachinesDeploy": {
        "title": "MachinesDeploy",
        "properties": {
          "model": {
            "$ref": "#\/components\/schemas\/MachinesModel"
          },
          "project_name": {
            "type": "string"
          }
        }
      },
      "ZMount": {
        "title": "ZMount",
        "description": "ZMount defines a mount point",
        "properties": {
          "size": {
            "type": "string"
          }
        }
      },
      "ZMachine": {
        "title": "ZMachine",
        "description": "ZMachine reservation data",
        "properties": {
          "flist": {
            "type": "string"
          },
          "network": {
            "$ref": "#\/components\/schemas\/MachineNetwork"
          },
          "size": {
            "description": "Network configuration for machine network",
            "type": "string"
          },
          "compute_capacity": {
            "$ref": "#\/components\/schemas\/MachineCapacity"
          },
          "mounts": {
            "$ref": "#\/components\/schemas\/MachineMount"
          },
          "entrypoint": {
            "description": "Mounts configure mounts\/disks attachments to this machine",
            "type": "string"
          },
          "env": {
            "description": "entrypoint of the container, if not set the configured one from the flist is going to be used",
            "type": "object"
          },
          "corex": {
            "description": "Env variables available for a container",
            "type": "boolean"
          }
        }
      },
      "ZMachineResult": {
        "title": "ZMachineResult",
        "description": "ZMachineResult result returned by VM reservation",
        "properties": {
          "id": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "ygg_ip": {
            "type": "string"
          },
          "console_url": {
            "description": "yggdrasil ip of the machine",
            "type": "string"
          }
        }
      },
      "MachineNetwork": {
        "title": "MachineNetwork",
        "properties": {
          "public_ip": {
            "type": "string"
          },
          "planetary": {
            "type": "boolean"
          },
          "interfaces": {
            "$ref": "#\/components\/schemas\/MachineInterface"
          }
        }
      },
      "MachineInterface": {
        "title": "MachineInterface",
        "properties": {
          "network": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          }
        }
      },
      "MachineCapacity": {
        "title": "MachineCapacity",
        "properties": {
          "cpu": {
            "type": "integer"
          },
          "memory": {
            "type": "string"
          }
        }
      },
      "MachineMount": {
        "title": "MachineMount",
        "properties": {
          "name": {
            "type": "string"
          },
          "mountpoint": {
            "type": "string"
          }
        }
      },
      "Zlogs": {
        "title": "Zlogs",
        "description": "Zlogs is a workload that enables users to stream logs from a zmachine to some url",
        "properties": {
          "zmachine": {
            "type": "string"
          },
          "output": {
            "description": "zmachine name to stream logs for",
            "type": "string"
          }
        }
      },
      "ZDBWorkload": {
        "title": "ZDBWorkload",
        "description": "ZDB workload info",
        "properties": {
          "size": {
            "type": "string"
          },
          "mode": {
            "description": "size of the zdb in GB",
            "type": "string"
          },
          "password": {
            "description": "mode of the zdb: \"user\" or \"seq\"",
            "type": "string"
          },
          "public": {
            "description": "password for the zdb",
            "type": "boolean"
          }
        }
      },
      "ZDBResultData": {
        "title": "ZDBResultData",
        "description": "ZDBResultData contains zdb reservation result",
        "properties": {
          "namespace": {
            "description": "TODO: change json representation snake case after resolving #1952 in zos",
            "type": "string"
          },
          "ips": {
            "description": "namespace of the zdb",
            "type": "array"
          },
          "port": {
            "description": "Computed IPs of the ZDB. Two IPs are returned: a public IPv6, and a YggIP, in this order",
            "type": "integer"
          }
        }
      },
      "NetworkWorkload": {
        "title": "NetworkWorkload",
        "description": "NetworkWorkload contains the network workload reservation arguments",
        "properties": {
          "network_ip_range": {
            "$ref": "#\/components\/schemas\/IPNet"
          },
          "subnet": {
            "$ref": "#\/components\/schemas\/IPNet"
          },
          "wg_private_key": {
            "description": "IPV4 subnet for this network resource, this must be a valid subnet of the entire network ip range.",
            "type": "string"
          },
          "wg_listen_port": {
            "description": "The private wg key of this node (this peer) which is installing this network workload right now.",
            "type": "integer"
          },
          "peers": {
            "$ref": "#\/components\/schemas\/Peer"
          }
        }
      },
      "IPNet": {
        "title": "IPNet",
        "properties": {
          "ip": {
            "type": "string"
          },
          "mask": {
            "type": "string"
          }
        }
      },
      "Peer": {
        "title": "Peer",
        "properties": {
          "subnet": {
            "$ref": "#\/components\/schemas\/IPNet"
          },
          "wg_public_key": {
            "type": "string"
          },
          "allowed_ips": {
            "$ref": "#\/components\/schemas\/IPNet"
          },
          "endpoint": {
            "type": "string"
          }
        }
      },
      "PublicIP": {
        "title": "PublicIP",
        "description": "PublicIP workload arguments",
        "properties": {
          "v4": {
            "type": "boolean"
          },
          "v6": {
            "description": "V4 use one of the reserved Ipv4 from your contract. The Ipv4 itself costs money + the network traffic",
            "type": "boolean"
          }
        }
      },
      "PublicIPResult": {
        "title": "PublicIPResult",
        "description": "PublicIPResult result returned by publicIP reservation",
        "properties": {
          "ip": {
            "$ref": "#\/components\/schemas\/IPNet"
          },
          "ipv6": {
            "$ref": "#\/components\/schemas\/IPNet"
          },
          "gateway": {
            "description": "IPv6 of the VM.",
            "type": "string"
          }
        }
      },
      "GatewayNameProxyWorkload": {
        "title": "GatewayNameProxyWorkload",
        "description": "GatewayNameProxy workload argurments",
        "properties": {
          "tls_passthrough": {
            "type": "boolean"
          },
          "backends": {
            "description": "whether to pass tls traffic or not",
            "type": "array"
          },
          "network": {
            "description": "Backends are list of backend ips (only one is supported atm)",
            "type": "string"
          }
        }
      },
      "GatewayNameProxyResult": {
        "title": "GatewayNameProxyResult",
        "description": "GatewayNameProxy reservation result",
        "properties": {
          "fqdn": {
            "type": "string"
          }
        }
      },
      "GatewayFQDNProxyWorkload": {
        "title": "GatewayFQDNProxyWorkload",
        "description": "GatewayFQDNProxy workload arguments",
        "properties": {
          "tls_passthrough": {
            "type": "boolean"
          },
          "backends": {
            "description": "whether to pass tls traffic or not",
            "type": "array"
          },
          "fqdn": {
            "description": "Backends are list of backend ips (only one is supported atm)",
            "type": "string"
          }
        }
      },
      "ZDB": {
        "title": "ZDB",
        "properties": {
          "node_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "size": {
            "type": "integer"
          },
          "description": {
            "description": "in GB",
            "type": "string"
          },
          "mode": {
            "description": "user, seq",
            "type": "string"
          }
        }
      },
      "ZDBResult": {
        "title": "ZDBResult",
        "properties": {
          "node_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "size": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "mode": {
            "description": "computed",
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "ips": {
            "type": "array"
          }
        }
      },
      "ZOSNodeRequest": {
        "title": "ZOSNodeRequest",
        "description": "A request that contains zos node calls information",
        "properties": {
          "node_id": {
            "type": "integer"
          },
          "data": {
            "$ref": "#\/components\/schemas\/ZOSNodeRequestData"
          }
        }
      },
      "Deployment": {
        "title": "Deployment",
        "description": "Deployment is a ZOS deployment structure",
        "properties": {
          "version": {
            "type": "integer"
          },
          "twin_id": {
            "description": "deployment version",
            "type": "integer"
          },
          "contract_id": {
            "description": "twin id of the user",
            "type": "string"
          },
          "metadata": {
            "description": "contract id of the deployment",
            "type": "string"
          },
          "description": {
            "description": "metdata of the deployment",
            "type": "string"
          },
          "expiration": {
            "description": "description is human readable description of the deployment",
            "type": "string"
          },
          "signature_requirement": {
            "$ref": "#\/components\/schemas\/SignatureRequirement"
          },
          "workloads": {
            "$ref": "#\/components\/schemas\/Workload"
          }
        }
      },
      "DeploymentRaw": {
        "title": "DeploymentRaw",
        "properties": {
          "version": {
            "type": "integer"
          },
          "twin_id": {
            "type": "integer"
          },
          "contract_id": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "expiration": {
            "type": "string"
          },
          "signature_requirement": {
            "$ref": "#\/components\/schemas\/SignatureRequirement"
          },
          "workloads": {
            "$ref": "#\/components\/schemas\/WorkloadRaw"
          }
        }
      },
      "SignatureRequirement": {
        "title": "SignatureRequirement",
        "description": "SignatureRequirement struct describes the signatures that are needed to be valid for the node to accept the deployment",
        "properties": {
          "requests": {
            "$ref": "#\/components\/schemas\/SignatureRequest"
          },
          "weight_required": {
            "description": "signature requests",
            "type": "integer"
          },
          "signatures": {
            "$ref": "#\/components\/schemas\/Signature"
          },
          "signature_style": {
            "description": "list of actual signatures",
            "type": "string"
          }
        }
      },
      "SignatureRequest": {
        "title": "SignatureRequest",
        "description": "SignatureRequest describes which twin should sign the deployment and how much this signature weighs",
        "properties": {
          "twin_id": {
            "type": "integer"
          },
          "required": {
            "description": "twin id of the signer",
            "type": "boolean"
          },
          "weight": {
            "description": "true if this twin is required to sign the deployment",
            "type": "integer"
          }
        }
      },
      "Signature": {
        "title": "Signature",
        "description": "Signature contains actual signature information",
        "properties": {
          "twin_id": {
            "type": "integer"
          },
          "signature": {
            "description": "twin id of the signer",
            "type": "string"
          },
          "signature_type": {
            "description": "signature string",
            "type": "string"
          }
        }
      },
      "Workload": {
        "title": "Workload",
        "description": "Workload contains workload information",
        "properties": {
          "version": {
            "type": "integer"
          },
          "name": {
            "description": "workload verison",
            "type": "string"
          },
          "workload_type": {
            "description": "workload name, must be unique per deployment",
            "type": "string"
          },
          "data": {
            "$ref": "#\/components\/schemas\/WorkloadData"
          },
          "metadata": {
            "description": "contains the workload type arguments.",
            "type": "string"
          },
          "description": {
            "description": "metadata is user specific meta attached to deployment",
            "type": "string"
          },
          "result": {
            "$ref": "#\/components\/schemas\/Result"
          }
        }
      },
      "WorkloadRaw": {
        "title": "WorkloadRaw",
        "properties": {
          "version": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "workload_type": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "result": {
            "$ref": "#\/components\/schemas\/ResultRaw"
          }
        }
      },
      "Result": {
        "title": "Result",
        "description": "Result is the struct filled by the node after a reservation object has been processed",
        "properties": {
          "created": {
            "type": "string"
          },
          "state": {
            "description": "Time when the result is sent",
            "type": "string"
          },
          "message": {
            "description": "state ate of the deployment (ok,error, ...)",
            "type": "string"
          },
          "data": {
            "$ref": "#\/components\/schemas\/ResultData"
          }
        }
      },
      "ResultRaw": {
        "title": "ResultRaw",
        "properties": {
          "created": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "string"
          }
        }
      },
      "SystemVersion": {
        "title": "SystemVersion",
        "description": "SystemVersion contains system version information",
        "properties": {
          "zos": {
            "type": "string"
          },
          "zinit": {
            "description": "zos version",
            "type": "string"
          }
        }
      },
      "DMI": {
        "title": "DMI",
        "description": "Contains DMI information of the node",
        "properties": {
          "tooling": {
            "$ref": "#\/components\/schemas\/Tooling"
          },
          "sections": {
            "$ref": "#\/components\/schemas\/Section"
          }
        }
      },
      "Tooling": {
        "title": "Tooling",
        "properties": {
          "aggregator": {
            "type": "string"
          },
          "decoder": {
            "type": "string"
          }
        }
      },
      "Section": {
        "title": "Section",
        "properties": {
          "handleline": {
            "type": "string"
          },
          "typestr": {
            "type": "string"
          },
          "type_": {
            "type": "integer"
          },
          "subsections": {
            "$ref": "#\/components\/schemas\/Subsection"
          }
        }
      },
      "Subsection": {
        "title": "Subsection",
        "properties": {
          "title": {
            "type": "string"
          },
          "properties": {
            "$ref": "#\/components\/schemas\/PropertyData"
          }
        }
      },
      "PropertyData": {
        "title": "PropertyData",
        "properties": {
          "value": {
            "type": "string"
          },
          "items": {
            "type": "array"
          }
        }
      },
      "PublicConfig": {
        "title": "PublicConfig",
        "description": "PublicConfig is the configuration of the interface that is connected to the public internet",
        "properties": {
          "type_": {
            "type": "string"
          },
          "ipv4": {
            "description": "Type define if we need to use the Vlan field or the MacVlan",
            "type": "string"
          },
          "ipv6": {
            "type": "string"
          },
          "gw4": {
            "type": "string"
          },
          "gw6": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          }
        }
      },
      "Statistics": {
        "title": "Statistics",
        "description": "Statistics contains some info about the node like total and used resources",
        "properties": {
          "total": {
            "$ref": "#\/components\/schemas\/Capacity"
          },
          "used": {
            "$ref": "#\/components\/schemas\/Capacity"
          }
        }
      },
      "Capacity": {
        "title": "Capacity",
        "properties": {
          "cru": {
            "type": "string"
          },
          "hru": {
            "type": "string"
          },
          "sru": {
            "type": "string"
          },
          "mru": {
            "type": "string"
          },
          "ipv4u": {
            "type": "string"
          }
        }
      },
      "ZOSNodeRequestData": {
        "title": "ZOSNodeRequestData",
        "oneOf": [
          {
            "$ref": "#\/components\/schemas\/Deployment"
          },
          {
            "type": "string"
          }
        ]
      },
      "WorkloadData": {
        "title": "WorkloadData",
        "oneOf": [
          {
            "$ref": "#\/components\/schemas\/GatewayFQDNProxyWorkload"
          },
          {
            "$ref": "#\/components\/schemas\/GatewayNameProxyWorkload"
          },
          {
            "$ref": "#\/components\/schemas\/NetworkWorkload"
          },
          {
            "$ref": "#\/components\/schemas\/PublicIP"
          },
          {
            "$ref": "#\/components\/schemas\/ZDBWorkload"
          },
          {
            "$ref": "#\/components\/schemas\/ZMachine"
          },
          {
            "$ref": "#\/components\/schemas\/ZMount"
          },
          {
            "$ref": "#\/components\/schemas\/Zlogs"
          }
        ]
      },
      "ResultData": {
        "title": "ResultData",
        "oneOf": [
          {
            "$ref": "#\/components\/schemas\/GatewayNameProxyResult"
          },
          {
            "$ref": "#\/components\/schemas\/PublicIPResult"
          },
          {
            "$ref": "#\/components\/schemas\/ZDBResult"
          },
          {
            "$ref": "#\/components\/schemas\/ZDBResultData"
          },
          {
            "$ref": "#\/components\/schemas\/ZMachineResult"
          },
          {
            "type": "string"
          }
        ]
      }
    }
  }
}